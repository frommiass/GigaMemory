#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è ExtractionModule - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IFactExtractor
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from submit.modules.extraction.module import ExtractionModule

def test_extraction_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã ExtractionModule"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'use_rules': True,
        'conflict_strategy': 'latest',
        'min_confidence': 0.5
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
    extraction = ExtractionModule(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dialogue_id = "test_dialogue_1"
    text = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, –º–Ω–µ 25 –ª–µ—Ç, —è —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –ú–æ—Å–∫–≤–µ. –õ—é–±–ª—é –ø–∏—Ü—Ü—É –∏ –∫–æ—Ñ–µ."
    context = {
        'dialogue_id': dialogue_id,
        'session_id': 'session_1'
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExtractionModule...")
    
    # 1. –¢–µ—Å—Ç extract_facts
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º extract_facts...")
    result = extraction.extract_facts(text, context)
    assert result.success, f"extract_facts failed: {result.error}"
    assert result.data is not None, "extract_facts returned None data"
    print(f"   ‚úÖ extract_facts: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(result.data)} —Ñ–∞–∫—Ç–æ–≤")
    
    # 2. –¢–µ—Å—Ç get_user_profile
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_profile...")
    result = extraction.get_user_profile(dialogue_id)
    assert result.success, f"get_user_profile failed: {result.error}"
    assert result.data is not None, "get_user_profile returned None data"
    print(f"   ‚úÖ get_user_profile: –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω")
    
    # 3. –¢–µ—Å—Ç query_facts
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º query_facts...")
    query = "–∏–º—è"
    result = extraction.query_facts(dialogue_id, query)
    assert result.success, f"query_facts failed: {result.error}"
    assert result.data is not None, "query_facts returned None data"
    print(f"   ‚úÖ query_facts: –Ω–∞–π–¥–µ–Ω–æ {len(result.data)} —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
    
    # 4. –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º extract_facts —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º...")
    result = extraction.extract_facts("", context)
    assert result.success, f"extract_facts failed with empty text: {result.error}"
    print(f"   ‚úÖ extract_facts: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    
    # 5. –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º
    print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º query_facts –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞...")
    result = extraction.query_facts("nonexistent_dialogue", query)
    assert result.success, f"query_facts failed for nonexistent dialogue: {result.error}"
    assert len(result.data) == 0, "Nonexistent dialogue should return empty facts"
    print(f"   ‚úÖ query_facts: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")
    
    # 6. –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
    print("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º extract_facts —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏...")
    texts = [
        "–Ø –∂–∏–≤—É –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏",
        "–Ø —É—á—É—Å—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"
    ]
    
    for i, test_text in enumerate(texts):
        context['session_id'] = f'session_{i+2}'
        result = extraction.extract_facts(test_text, context)
        assert result.success, f"extract_facts failed for text {i+1}: {result.error}"
        print(f"   ‚úÖ extract_facts: —Ç–µ–∫—Å—Ç {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # 7. –¢–µ—Å—Ç query_facts —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    print("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º query_facts —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
    queries = ["–≤–æ–∑—Ä–∞—Å—Ç", "—Ä–∞–±–æ—Ç–∞", "–≥–æ—Ä–æ–¥", "—Ö–æ–±–±–∏"]
    
    for query in queries:
        result = extraction.query_facts(dialogue_id, query)
        assert result.success, f"query_facts failed for query '{query}': {result.error}"
        print(f"   ‚úÖ query_facts: –∑–∞–ø—Ä–æ—Å '{query}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã ExtractionModule –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç:")
    print("‚úÖ IFactExtractor.extract_facts - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ IFactExtractor.get_user_profile - —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print("‚úÖ IFactExtractor.query_facts - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    test_extraction_module()
