#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG
"""
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from submit.smart_memory import SmartMemory, SmartMemoryConfig
from models import Message

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º RAG
    config = SmartMemoryConfig()
    config.use_fact_based_rag = True
    config.use_fact_extraction = True
    config.use_vector_search = False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    config.use_compression = False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SmartMemory
    try:
        smart_memory = SmartMemory("dummy_model_path", config)
        print("‚úÖ SmartMemory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG –¥–≤–∏–∂–∫–∞
    if hasattr(smart_memory, 'fact_rag_engine') and smart_memory.fact_rag_engine:
        print("‚úÖ FactBasedRAGEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå FactBasedRAGEngine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if hasattr(smart_memory.fact_rag_engine, 'classifier'):
        print("‚úÖ FactBasedQuestionClassifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå FactBasedQuestionClassifier –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    test_questions = [
        "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?",
        "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∞—è –ø–æ—Ä–æ–¥–∞ —É –º–æ–µ–π —Å–æ–±–∞–∫–∏?",
        "–°–∏–≥–∞—Ä–µ—Ç—ã –∫–∞–∫–æ–π –º–∞—Ä–∫–∏ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é?",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?"
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for question in test_questions:
        fact_type, confidence = smart_memory.fact_rag_engine.classifier.classify_question(question)
        print(f"  '{question}' -> {fact_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_integration()
    sys.exit(0 if success else 1)

