#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å FACT_PATTERNS
–ù–∞—Ö–æ–¥–∏—Ç –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ PREFERENCE_FOOD
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def diagnose_fact_patterns():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FACT_PATTERNS"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FACT_PATTERNS")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        from src.submit.modules.extraction.fact_models import FactType
        from src.submit.modules.extraction.fact_patterns import FACT_PATTERNS
        
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print(f"\n–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(FACT_PATTERNS)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π:")
        
        errors = []
        warnings = []
        
        for i, (key, patterns) in enumerate(FACT_PATTERNS.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–ª—é—á–∞
                if not isinstance(key, FactType):
                    errors.append(f"  ‚ùå –ö–ª—é—á #{i}: {key} - –ù–ï —è–≤–ª—è–µ—Ç—Å—è FactType enum!")
                    print(f"  ‚ùå {key} - –Ω–µ FactType, –∞ {type(key)}")
                    
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π FactType
                    if isinstance(key, str):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø
                        found = False
                        for ft in FactType:
                            if ft.value == key or ft.name == key:
                                print(f"     ‚Üí –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: FactType.{ft.name}")
                                found = True
                                break
                        
                        if not found:
                            print(f"     ‚Üí –ù–ï –ù–ê–ô–î–ï–ù —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π FactType!")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if not isinstance(patterns, list):
                    warnings.append(f"  ‚ö†Ô∏è  {key.value}: –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å–ø–∏—Å–æ–∫")
                elif len(patterns) == 0:
                    warnings.append(f"  ‚ö†Ô∏è  {key.value}: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
                else:
                    # –í—Å–µ —Ö–æ—Ä–æ—à–æ —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º
                    pass
                    
            except Exception as e:
                errors.append(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞ #{i}: {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if errors:
            print("\n‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in errors:
                print(error)
        else:
            print("\n‚úÖ –í—Å–µ –∫–ª—é—á–∏ —è–≤–ª—è—é—Ç—Å—è FactType enum")
        
        if warnings:
            print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in warnings:
                print(warning)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ PREFERENCE_FOOD
        print("\nüîç –ü–æ–∏—Å–∫ PREFERENCE_FOOD:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ FactType
        preference_food_exists = False
        for ft in FactType:
            if ft.name == 'PREFERENCE_FOOD':
                preference_food_exists = True
                print(f"  ‚úÖ FactType.PREFERENCE_FOOD —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ft.value}")
                break
        
        if not preference_food_exists:
            print("  ‚ùå FactType.PREFERENCE_FOOD –ù–ï –ù–ê–ô–î–ï–ù!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ FACT_PATTERNS
        preference_food_in_patterns = False
        for key in FACT_PATTERNS:
            if isinstance(key, FactType) and key.name == 'PREFERENCE_FOOD':
                preference_food_in_patterns = True
                print(f"  ‚úÖ PREFERENCE_FOOD –µ—Å—Ç—å –≤ FACT_PATTERNS")
                print(f"     –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(FACT_PATTERNS[key])}")
                break
        
        if not preference_food_in_patterns:
            print("  ‚ö†Ô∏è  PREFERENCE_FOOD –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ FACT_PATTERNS")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –æ–Ω —Ç–∞–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            for key in FACT_PATTERNS:
                if str(key) == 'PREFERENCE_FOOD' or (hasattr(key, 'value') and key.value == 'preference_food'):
                    print(f"  ‚ùå –ù–∞–π–¥–µ–Ω –∫–∞–∫ {type(key)}: {key}")
                    break
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å PREFERENCE_FOOD:")
        
        test_text = "–Ø –ª—é–±–ª—é –ø–∏—Ü—Ü—É –∏ —Å—É—à–∏"
        
        try:
            from src.submit.modules.extraction.fact_extractor import RuleBasedFactExtractor
            
            extractor = RuleBasedFactExtractor()
            facts = extractor.extract_facts_from_text(
                test_text, 
                session_id="test",
                dialogue_id="test"
            )
            
            print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(facts)} —Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫")
            
            for fact in facts:
                if 'food' in fact.type.value.lower() or 'preference' in fact.type.value.lower():
                    print(f"     - {fact.type.value}: {fact.object}")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        return len(errors) == 0
        
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def fix_fact_patterns():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å FACT_PATTERNS"""
    
    print("\n\nüîß –ü–û–ü–´–¢–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        from src.submit.modules.extraction.fact_models import FactType
        import src.submit.modules.extraction.fact_patterns as fp_module
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        fixed_patterns = {}
        fixes_made = 0
        
        for key, patterns in fp_module.FACT_PATTERNS.items():
            if isinstance(key, FactType):
                # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
                fixed_patterns[key] = patterns
            elif isinstance(key, str):
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ FactType
                fixed = False
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ value
                for ft in FactType:
                    if ft.value == key:
                        fixed_patterns[ft] = patterns
                        fixes_made += 1
                        print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '{key}' ‚Üí FactType.{ft.name}")
                        fixed = True
                        break
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ name
                if not fixed:
                    for ft in FactType:
                        if ft.name == key:
                            fixed_patterns[ft] = patterns
                            fixes_made += 1
                            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '{key}' ‚Üí FactType.{ft.name}")
                            fixed = True
                            break
                
                if not fixed:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {key}")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏
            else:
                print(f"  ‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª—é—á–∞: {type(key)}")
        
        if fixes_made > 0:
            # –ó–∞–º–µ–Ω—è–µ–º FACT_PATTERNS
            fp_module.FACT_PATTERNS = fixed_patterns
            print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixes_made} –∫–ª—é—á–µ–π")
            print("   FACT_PATTERNS –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            
            from src.submit.modules.extraction.fact_extractor import RuleBasedFactExtractor
            
            extractor = RuleBasedFactExtractor()
            facts = extractor.extract_facts_from_text(
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–µ—Ç—Ä, —è –ª—é–±–ª—é –ø–∏—Ü—Ü—É",
                session_id="test",
                dialogue_id="test"  
            )
            
            print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(facts)} —Ñ–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            return True
        else:
            print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            return True
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º
    success = diagnose_fact_patterns()
    
    if not success:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        if fix_fact_patterns():
            print("\n" + "=" * 60)
            print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã")
        else:
            print("\n" + "=" * 60)
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
            print("\n–í —Ñ–∞–π–ª–µ fact_patterns.py –∑–∞–º–µ–Ω–∏—Ç–µ:")
            print("  'PREFERENCE_FOOD': [...]")
            print("–ù–∞:")
            print("  FactType.PREFERENCE_FOOD: [...]")
    else:
        print("\n" + "=" * 60)
        print("‚úÖ –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!")
