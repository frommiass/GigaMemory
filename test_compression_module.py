#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Compression Module
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ICompressor
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from submit.modules.compression.module import CompressionModule

def test_compression_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Compression Module"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Compression Module...")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'min_confidence': 0.5,
        'use_rules': True,
        'use_llm': False,
        'conflict_strategy': 'latest',
        'filter_copypaste': True,
        'max_text_length': 10000,
        'rule_confidence_threshold': 0.7,
        'method': 'hybrid'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
        compressor = CompressionModule(config)
        print("‚úÖ CompressionModule —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: compress_text
        print("\nüìù –¢–µ—Å—Ç 1: compress_text")
        test_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∂–∞—Ç–∏—è. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∂–∞—Ç–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å–º—ã—Å–ª–∞. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Å–∂–∞—Ç–∏—è."
        
        result = compressor.compress_text(test_text, "moderate")
        assert result.success, f"compress_text failed: {result.error}"
        assert result.data is not None, "compress_text returned None"
        assert len(result.data) < len(test_text), "–°–∂–∞—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ"
        print(f"‚úÖ compress_text: {len(test_text)} -> {len(result.data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç 2: compress_sessions
        print("\nüìù –¢–µ—Å—Ç 2: compress_sessions")
        sessions = {
            'session_1': "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ Google.",
            'session_2': "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ö–æ–±–±–∏ - –∏–≥—Ä–∞ –≤ —Ñ—É—Ç–±–æ–ª –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º —Å –¥—Ä—É–∑—å—è–º–∏.",
            'session_3': "–ü–ª–∞–Ω—ã –Ω–∞ –æ—Ç–ø—É—Å–∫ - –ø–æ–µ–∑–¥–∫–∞ –≤ –ò—Ç–∞–ª–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ."
        }
        
        result = compressor.compress_sessions(sessions)
        assert result.success, f"compress_sessions failed: {result.error}"
        assert result.data is not None, "compress_sessions returned None"
        assert len(result.data) == len(sessions), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç—ã—Ö —Å–µ—Å—Å–∏–π –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print(f"‚úÖ compress_sessions: {len(sessions)} —Å–µ—Å—Å–∏–π —Å–∂–∞—Ç–æ")
        
        # –¢–µ—Å—Ç 3: get_compression_stats
        print("\nüìù –¢–µ—Å—Ç 3: get_compression_stats")
        result = compressor.get_compression_stats()
        assert result.success, f"get_compression_stats failed: {result.error}"
        assert result.data is not None, "get_compression_stats returned None"
        assert 'total_compressed' in result.data, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å total_compressed"
        print(f"‚úÖ get_compression_stats: {result.data}")
        
        # –¢–µ—Å—Ç 4: compress_for_context (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        print("\nüìù –¢–µ—Å—Ç 4: compress_for_context")
        long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã. " * 10
        compressed = compressor.compress_for_context(long_text, 100)
        assert len(compressed) <= 100, f"–°–∂–∞—Ç—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(compressed)}"
        print(f"‚úÖ compress_for_context: {len(long_text)} -> {len(compressed)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç 5: –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–∂–∞—Ç–∏—è
        print("\nüìù –¢–µ—Å—Ç 5: –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–∂–∞—Ç–∏—è")
        for level in ["light", "moderate", "heavy"]:
            result = compressor.compress_text(test_text, level)
            assert result.success, f"compress_text with level {level} failed: {result.error}"
            print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level}: {len(test_text)} -> {len(result.data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Compression Module –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Compression Module: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_compression_module()
    sys.exit(0 if success else 1)
