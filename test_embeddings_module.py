#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è EmbeddingsModule - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IEmbeddingEngine
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from models import Message
from submit.modules.embeddings.module import EmbeddingsModule

def test_embeddings_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã EmbeddingsModule"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model_name': 'cointegrated/rubert-tiny2',
        'device': 'cpu',
        'batch_size': 32,
        'use_cache': True
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
    embeddings = EmbeddingsModule(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dialogue_id = "test_dialogue_1"
    texts = ["–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π
    messages1 = [
        Message(role="user", content="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", session_id="session_1"),
        Message(role="assistant", content="–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!", session_id="session_1")
    ]
    messages2 = [
        Message(role="user", content="–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ", session_id="session_2"),
        Message(role="assistant", content="–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ –∏ —Ç–µ–ø–ª–æ", session_id="session_2")
    ]
    
    sessions = {
        "session_1": messages1,
        "session_2": messages2
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmbeddingsModule...")
    
    # 1. –¢–µ—Å—Ç encode_texts
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º encode_texts...")
    result = embeddings.encode_texts(texts)
    assert result.success, f"encode_texts failed: {result.error}"
    assert result.data is not None, "encode_texts returned None data"
    assert len(result.data) == len(texts), f"Expected {len(texts)} embeddings, got {len(result.data)}"
    print(f"   ‚úÖ encode_texts: {len(result.data)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
    
    # 2. –¢–µ—Å—Ç index_dialogue
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º index_dialogue...")
    result = embeddings.index_dialogue(dialogue_id, sessions)
    assert result.success, f"index_dialogue failed: {result.error}"
    assert result.metadata['sessions_indexed'] == len(sessions), "–ù–µ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"
    print(f"   ‚úÖ index_dialogue: {result.metadata['sessions_indexed']} —Å–µ—Å—Å–∏–π –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
    
    # 3. –¢–µ—Å—Ç vector_search (–ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏)
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º vector_search...")
    query = "–∫–∞–∫ –¥–µ–ª–∞"
    result = embeddings.vector_search(query, dialogue_id, top_k=3)
    assert result.success, f"vector_search failed: {result.error}"
    print(f"   ‚úÖ vector_search: –Ω–∞–π–¥–µ–Ω–æ {len(result.data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # 4. –¢–µ—Å—Ç vector_search –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º vector_search –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞...")
    result = embeddings.vector_search(query, "nonexistent_dialogue", top_k=3)
    assert not result.success, "vector_search should fail for nonexistent dialogue"
    assert "not indexed" in result.error, "Error message should mention 'not indexed'"
    print(f"   ‚úÖ vector_search: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥")
    
    # 5. –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–µ–∫—Å—Ç–æ–≤
    print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º encode_texts —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º...")
    result = embeddings.encode_texts([])
    assert result.success, f"encode_texts failed with empty list: {result.error}"
    assert len(result.data) == 0, "Empty list should return empty embeddings"
    print(f"   ‚úÖ encode_texts: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    
    # 6. –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
    print("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º index_dialogue —Å –ø—É—Å—Ç—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏...")
    empty_sessions = {}
    result = embeddings.index_dialogue("empty_dialogue", empty_sessions)
    assert result.success, f"index_dialogue failed with empty sessions: {result.error}"
    assert result.metadata['sessions_indexed'] == 0, "Empty sessions should return 0 indexed"
    print(f"   ‚úÖ index_dialogue: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã EmbeddingsModule –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç:")
    print("‚úÖ IEmbeddingEngine.encode_texts - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ IEmbeddingEngine.vector_search - —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print("‚úÖ IEmbeddingEngine.index_dialogue - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    test_embeddings_module()
