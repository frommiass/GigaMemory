#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
"""
import json
import re
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

class RealFactExtractor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
        self.fact_patterns = {
            'name': [
                r'–º–µ–Ω—è –∑–æ–≤—É—Ç ([–ê-–Ø–∞-—è]+)',
                r'–º–æ–µ –∏–º—è ([–ê-–Ø–∞-—è]+)',
                r'–∑–æ–≤—É—Ç ([–ê-–Ø–∞-—è]+)',
                r'—è ([–ê-–Ø–∞-—è]+)'
            ],
            'age': [
                r'–º–Ω–µ (\d+) –ª–µ—Ç',
                r'–∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å (\d+)',
                r'–≤–æ–∑—Ä–∞—Å—Ç (\d+)',
                r'(\d+) –ª–µ—Ç'
            ],
            'profession': [
                r'—Ä–∞–±–æ—Ç–∞—é ([–ê-–Ø–∞-—è\s]+)',
                r'—è ([–ê-–Ø–∞-—è\s]+)',
                r'–ø—Ä–æ—Ñ–µ—Å—Å–∏—è ([–ê-–Ø–∞-—è\s]+)',
                r'–∑–∞–Ω–∏–º–∞—é—Å—å ([–ê-–Ø–∞-—è\s]+)'
            ],
            'location': [
                r'–∂–∏–≤—É –≤ ([–ê-–Ø–∞-—è\s]+)',
                r'–Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ ([–ê-–Ø–∞-—è\s]+)',
                r'–≥–æ—Ä–æ–¥ ([–ê-–Ø–∞-—è\s]+)',
                r'—Ä–∞–π–æ–Ω ([–ê-–Ø–∞-—è\s]+)'
            ],
            'family': [
                r'–∂–µ–Ω–∞ ([–ê-–Ø–∞-—è]+)',
                r'–º—É–∂ ([–ê-–Ø–∞-—è]+)',
                r'–¥–æ—á—å ([–ê-–Ø–∞-—è]+)',
                r'—Å—ã–Ω ([–ê-–Ø–∞-—è]+)',
                r'–¥–µ—Ç–∏ ([–ê-–Ø–∞-—è\s]+)'
            ],
            'hobbies': [
                r'—É–≤–ª–µ–∫–∞—é—Å—å ([–ê-–Ø–∞-—è\s]+)',
                r'—Ö–æ–±–±–∏ ([–ê-–Ø–∞-—è\s]+)',
                r'–∑–∞–Ω–∏–º–∞—é—Å—å ([–ê-–Ø–∞-—è\s]+)',
                r'–ª—é–±–ª—é ([–ê-–Ø–∞-—è\s]+)'
            ],
            'pets': [
                r'—Å–æ–±–∞–∫–∞ ([–ê-–Ø–∞-—è]+)',
                r'–∫–æ—à–∫–∞ ([–ê-–Ø–∞-—è]+)',
                r'–ø–∏—Ç–æ–º–µ—Ü ([–ê-–Ø–∞-—è\s]+)'
            ]
        }
    
    def extract_facts_from_text(self, text: str) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        facts = {category: [] for category in self.fact_patterns.keys()}
        text_lower = text.lower()
        
        for category, patterns in self.fact_patterns.items():
            for pattern in patterns:
                matches = re.findall(pattern, text_lower)
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                filtered_matches = [match.strip() for match in matches 
                                   if 2 <= len(match.strip()) <= 50]
                facts[category].extend(filtered_matches)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for category in facts:
            facts[category] = list(set([f for f in facts[category] if f]))
        
        return facts
    
    def extract_facts_from_dialog(self, dialog: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        facts = {
            'dialog_id': dialog.get('dialog_id', 'unknown'),
            'user_messages': [],
            'extracted_facts': {}
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for session in dialog.get('sessions', []):
            for message in session.get('messages', []):
                if message.get('role') == 'user':
                    user_text = message.get('content', '')
                    if user_text:
                        facts['user_messages'].append(user_text)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_user_text = ' '.join(facts['user_messages'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
        facts['extracted_facts'] = self.extract_facts_from_text(all_user_text)
        
        return facts
    
    def create_prompt_for_dialog(self, dialog_facts: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–∫—Ç–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞"""
        dialog_id = dialog_facts['dialog_id']
        facts = dialog_facts['extracted_facts']
        
        prompt = f"""# –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–∫—Ç–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}

## –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

"""
        
        for category, values in facts.items():
            if values:
                category_name = {
                    'name': '–ò–º—è',
                    'age': '–í–æ–∑—Ä–∞—Å—Ç', 
                    'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
                    'location': '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    'family': '–°–µ–º—å—è',
                    'hobbies': '–£–≤–ª–µ—á–µ–Ω–∏—è',
                    'pets': '–ü–∏—Ç–æ–º—Ü—ã'
                }.get(category, category)
                
                prompt += f"**{category_name}:** {', '.join(values)}\n"
        
        prompt += f"""

## –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{chr(10).join(dialog_facts['user_messages'][:3])}...

## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–∫—Ç–∞–º–∏:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
2. –ü–æ–º–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
3. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ñ–∞–∫—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

---
*–ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        return prompt

def load_dialogs_from_jsonl(file_path: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSONL —Ñ–∞–π–ª–∞"""
    dialogs = []
    
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            if line.strip():
                try:
                    data = json.loads(line)
                    dialogs.append(data)
                    if line_num % 100 == 0:
                        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {line_num}")
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                    continue
    
    return dialogs

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤")
    print("="*60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    data_file = "data/format_example.jsonl"
    
    if not Path(data_file).exists():
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏...")
        dialogs = load_dialogs_from_jsonl(data_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å —Ñ–∞–∫—Ç–æ–≤
        extractor = RealFactExtractor()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = Path("real_facts_prompts")
        output_dir.mkdir(exist_ok=True)
        
        print(f"\nüîß –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
        for i, dialog in enumerate(dialogs, 1):
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ {i}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
            dialog_facts = extractor.extract_facts_from_dialog(dialog)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = extractor.create_prompt_for_dialog(dialog_facts)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"dialog_{i}_facts_{timestamp}.txt"
            filepath = output_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(prompt)
            
            print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(dialogs)} —Ñ–∞–π–ª–æ–≤ —Å —Ñ–∞–∫—Ç–∞–º–∏")
        print(f"üìÅ –ü–∞–ø–∫–∞: {output_dir.absolute()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
