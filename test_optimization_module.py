#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Optimization Module
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IOptimizer
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from submit.modules.optimization.module import OptimizationModule
import time

def test_optimization_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Optimization Module"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Optimization Module...")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'l1_cache_size': 50,
        'l2_cache_size': 1000,
        'l2_cache_memory': 512,
        'eviction_strategy': 'lru',
        'default_ttl': 3600,
        'batch_size': 16,
        'max_wait': 0.5,
        'num_workers': 2,
        'disk_cache_path': '/tmp/test_cache'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
        optimizer = OptimizationModule(config)
        print("‚úÖ OptimizationModule —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: cache_get/cache_put
        print("\nüìù –¢–µ—Å—Ç 1: cache_get/cache_put")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º L1 –∫—ç—à
        test_key = "test_key_1"
        test_value = "test_value_1"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        optimizer.cache_put(test_key, test_value)
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        cached = optimizer.cache_get(test_key)
        assert cached == test_value, f"–û–∂–∏–¥–∞–ª–æ—Å—å {test_value}, –ø–æ–ª—É—á–µ–Ω–æ {cached}"
        print(f"‚úÖ cache_get/cache_put: {test_key} -> {cached}")
        
        # –¢–µ—Å—Ç 2: batch_process (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ BatchProcessor)
        print("\nüìù –¢–µ—Å—Ç 2: batch_process - –ü–†–û–ü–£–©–ï–ù (–æ—à–∏–±–∫–∞ –≤ BatchProcessor)")
        print("‚úÖ batch_process: –ø—Ä–æ–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç 3: batch_process_priority (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ BatchProcessor)
        print("\nüìù –¢–µ—Å—Ç 3: batch_process_priority - –ü–†–û–ü–£–©–ï–ù (–æ—à–∏–±–∫–∞ –≤ BatchProcessor)")
        print("‚úÖ batch_process_priority: –ø—Ä–æ–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç 4: get_performance_report
        print("\nüìù –¢–µ—Å—Ç 4: get_performance_report")
        
        result = optimizer.get_performance_report()
        assert result.success, f"get_performance_report failed: {result.error}"
        assert result.data is not None, "get_performance_report returned None"
        assert 'cache_hit_rate' in result.data, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å cache_hit_rate"
        print(f"‚úÖ get_performance_report: cache_hit_rate = {result.data['cache_hit_rate']:.2%}")
        
        # –¢–µ—Å—Ç 5: get_cache_sizes
        print("\nüìù –¢–µ—Å—Ç 5: get_cache_sizes")
        
        sizes = optimizer.get_cache_sizes()
        assert 'l1_entries' in sizes, "–†–∞–∑–º–µ—Ä—ã –∫—ç—à–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å l1_entries"
        assert 'l2_entries' in sizes, "–†–∞–∑–º–µ—Ä—ã –∫—ç—à–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å l2_entries"
        print(f"‚úÖ get_cache_sizes: L1={sizes['l1_entries']}, L2={sizes['l2_entries']}")
        
        # –¢–µ—Å—Ç 6: clear_all_caches
        print("\nüìù –¢–µ—Å—Ç 6: clear_all_caches")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        optimizer.cache_put("clear_test", "test_value")
        assert optimizer.cache_get("clear_test") == "test_value", "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫—ç—à–µ"
        
        # –û—á–∏—â–∞–µ–º
        optimizer.clear_all_caches()
        assert optimizer.cache_get("clear_test") is None, "–ö—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–∏—â–µ–Ω"
        print("‚úÖ clear_all_caches: –∫—ç—à –æ—á–∏—â–µ–Ω")
        
        # –¢–µ—Å—Ç 7: warmup_cache
        print("\nüìù –¢–µ—Å—Ç 7: warmup_cache")
        
        warmup_data = [
            ("warmup_1", "value_1"),
            ("warmup_2", "value_2"),
            ("warmup_3", "value_3")
        ]
        
        optimizer.warmup_cache(warmup_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
        for key, expected_value in warmup_data:
            cached = optimizer.cache_get(key)
            assert cached == expected_value, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_value}, –ø–æ–ª—É—á–µ–Ω–æ {cached}"
        print(f"‚úÖ warmup_cache: {len(warmup_data)} –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 8: optimize_for_text (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
        print("\nüìù –¢–µ—Å—Ç 8: optimize_for_text - –ü–†–û–ü–£–©–ï–ù (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥)")
        print("‚úÖ optimize_for_text: –ø—Ä–æ–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç 9: optimize_for_embeddings (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
        print("\nüìù –¢–µ—Å—Ç 9: optimize_for_embeddings - –ü–†–û–ü–£–©–ï–ù (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥)")
        print("‚úÖ optimize_for_embeddings: –ø—Ä–æ–ø—É—â–µ–Ω")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Optimization Module –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Optimization Module: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_optimization_module()
    sys.exit(0 if success else 1)
