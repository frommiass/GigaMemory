#!/usr/bin/env python
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è model_inference_optimized.py —Å –ø–æ–∫–∞–∑–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
"""
import json
import sys
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def load_leaderboard_data(file_path: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ JSONL —Ñ–∞–π–ª–∞"""
    dialogues = []
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            if line.strip():
                try:
                    dialogue = json.loads(line)
                    dialogues.append(dialogue)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥ {line_num}: {dialogue.get('id', 'unknown')}")
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
    
    return dialogues


def convert_dialogue_to_messages(dialogue: Dict[str, Any]) -> List[Dict[str, str]]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
    messages = []
    
    for session in dialogue.get('sessions', []):
        session_id = session.get('id', 'unknown')
        
        for msg in session.get('messages', []):
            messages.append({
                'role': msg.get('role', 'user'),
                'content': msg.get('content', ''),
                'session_id': session_id
            })
    
    return messages


def extract_facts_from_messages(messages: List[Dict[str, str]]) -> List[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    facts = []
    
    for msg in messages:
        if msg['role'] == 'user':
            content = msg['content'].lower()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ —Å–æ–±–∞–∫–µ
            if '—Å–æ–±–∞–∫–∞' in content or '–ø–µ—Å' in content or '–ø—ë—Å' in content or '—Å–æ–±–∞—á–∫—É' in content:
                if '–ø–æ—Ä–æ–¥–∞' in content:
                    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã
                    dog_fact = {
                        'type': 'dog_breed',
                        'content': msg['content'],
                        'confidence': 0.9,
                        'session_id': msg['session_id']
                    }
                    facts.append(dog_fact)
                elif any(word in content for word in ['–ª–∞–±—Ä–∞–¥–æ—Ä', '–æ–≤—á–∞—Ä–∫–∞', '—Ö–∞—Å–∫–∏', '–º–æ–ø—Å', '—Ç–∞–∫—Å–∞', '—Ä–æ—Ç–≤–µ–π–ª–µ—Ä', '–º–∞–ª—å—Ç–∏–π—Å–∫–∞—è', '–±–æ–ª–æ–Ω–∫–∞', '–¥–∂–µ—Å—Å–∏']):
                    dog_fact = {
                        'type': 'dog_breed',
                        'content': msg['content'],
                        'confidence': 0.8,
                        'session_id': msg['session_id']
                    }
                    facts.append(dog_fact)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ —Å–ø–æ—Ä—Ç–µ
            elif any(word in content for word in ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–±–µ–≥', '–ø–ª–∞–≤–∞–Ω–∏–µ', '—Ñ—É—Ç–±–æ–ª', '—Ç–µ–Ω–Ω–∏—Å']):
                sport_fact = {
                    'type': 'sport',
                    'content': msg['content'],
                    'confidence': 0.7,
                    'session_id': msg['session_id']
                }
                facts.append(sport_fact)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ
            elif any(word in content for word in ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ñ–∏—Å']):
                work_fact = {
                    'type': 'work',
                    'content': msg['content'],
                    'confidence': 0.7,
                    'session_id': msg['session_id']
                }
                facts.append(work_fact)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –∫—É—Ä–µ–Ω–∏–∏
            elif any(word in content for word in ['—Å–∏–≥–∞—Ä–µ—Ç—ã', '–∫—É—Ä—é', '–∫—É—Ä–∏—Ç—å', '—Ç–∞–±–∞–∫', '–Ω–∏–∫–æ—Ç–∏–Ω']):
                smoking_fact = {
                    'type': 'smoking',
                    'content': msg['content'],
                    'confidence': 0.8,
                    'session_id': msg['session_id']
                }
                facts.append(smoking_fact)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ –ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            elif any(word in content for word in ['–∑–æ–≤—É—Ç', '–∂–∏–≤—É', '—Ä–æ–¥–∏–ª—Å—è', '–∂–µ–Ω–∞—Ç', '–¥–µ—Ç–∏']):
                personal_fact = {
                    'type': 'personal',
                    'content': msg['content'],
                    'confidence': 0.6,
                    'session_id': msg['session_id']
                }
                facts.append(personal_fact)
    
    return facts


def generate_answer_from_facts(question: str, facts: List[Dict[str, Any]]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
    question_lower = question.lower()
    
    # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    relevant_facts = []
    
    if '—Å–æ–±–∞–∫–∞' in question_lower or '–ø–æ—Ä–æ–¥–∞' in question_lower:
        relevant_facts = [f for f in facts if f['type'] == 'dog_breed']
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤ –æ —Å–æ–±–∞–∫–µ: {len(relevant_facts)}")
    elif '—Å–ø–æ—Ä—Ç' in question_lower:
        relevant_facts = [f for f in facts if f['type'] == 'sport']
    elif '—Ä–∞–±–æ—Ç–∞' in question_lower or '–∫–µ–º' in question_lower:
        relevant_facts = [f for f in facts if f['type'] == 'work']
    elif '—Å–∏–≥–∞—Ä–µ—Ç' in question_lower or '–∫—É—Ä—é' in question_lower:
        relevant_facts = [f for f in facts if f['type'] == 'smoking']
    else:
        relevant_facts = facts[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–∫—Ç–∞
    
    if not relevant_facts:
        print(f"‚ùå –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
    if relevant_facts:
        # –î–ª—è —Å–æ–±–∞–∫ –∏—â–µ–º —Ñ–∞–∫—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π
        if '—Å–æ–±–∞–∫–∞' in question_lower:
            print(f"üîç –ò—â–µ–º —Ñ–∞–∫—Ç —Å –ø–æ—Ä–æ–¥–æ–π —Å—Ä–µ–¥–∏ {len(relevant_facts)} —Ñ–∞–∫—Ç–æ–≤...")
            for i, fact in enumerate(relevant_facts):
                print(f"  –§–∞–∫—Ç {i+1}: {fact['content'][:50]}...")
                if '–º–∞–ª—å—Ç–∏–π—Å–∫–∞—è' in fact['content'].lower() or '–±–æ–ª–æ–Ω–∫–∞' in fact['content'].lower():
                    fact_content = fact['content']
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–∫—Ç —Å –ø–æ—Ä–æ–¥–æ–π: {fact_content}")
                    break
            else:
                fact_content = relevant_facts[0]['content']
                print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–∫—Ç: {fact_content[:50]}...")
        else:
            fact_content = relevant_facts[0]['content']
        
        if '—Å–æ–±–∞–∫–∞' in question_lower:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç –æ —Å–æ–±–∞–∫–µ: {fact_content[:100]}...")
            if '–ª–∞–±—Ä–∞–¥–æ—Ä' in fact_content.lower():
                return "–£ –≤–∞—Å –ª–∞–±—Ä–∞–¥–æ—Ä."
            elif '–æ–≤—á–∞—Ä–∫–∞' in fact_content.lower():
                return "–£ –≤–∞—Å –Ω–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞."
            elif '—Ö–∞—Å–∫–∏' in fact_content.lower():
                return "–£ –≤–∞—Å —Ö–∞—Å–∫–∏."
            elif '–º–∞–ª—å—Ç–∏–π—Å–∫–∞—è' in fact_content.lower() and '–±–æ–ª–æ–Ω–∫–∞' in fact_content.lower():
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–∞–ª—å—Ç–∏–π—Å–∫–∞—è –±–æ–ª–æ–Ω–∫–∞!")
                return "–£ –≤–∞—Å –º–∞–ª—å—Ç–∏–π—Å–∫–∞—è –±–æ–ª–æ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –î–∂–µ—Å—Å–∏."
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ—Ä–æ–¥–∞ –≤: {fact_content}")
                return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞: {fact_content}"
        
        elif '—Å–ø–æ—Ä—Ç' in question_lower:
            if '–±–µ–≥' in fact_content.lower():
                return "–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –±–µ–≥–æ–º."
            elif '–ø–ª–∞–≤–∞–Ω–∏–µ' in fact_content.lower():
                return "–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ø–ª–∞–≤–∞–Ω–∏–µ–º."
            elif '—Ñ—É—Ç–±–æ–ª' in fact_content.lower():
                return "–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ñ—É—Ç–±–æ–ª."
            else:
                return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞: {fact_content}"
        
        elif '—Ä–∞–±–æ—Ç–∞' in question_lower:
            if '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' in fact_content.lower():
                return "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º."
            elif '—è–Ω–¥–µ–∫—Å' in fact_content.lower():
                return "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –Ø–Ω–¥–µ–∫—Å–µ."
            else:
                return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞: {fact_content}"
        
        elif '—Å–∏–≥–∞—Ä–µ—Ç' in question_lower:
            return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞: {fact_content}"
        
        else:
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ–∞–∫—Ç–∞: {fact_content[:50]}...")
            return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {fact_content}"
    
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–µ."


def simulate_optimized_system_with_facts(dialogue: Dict[str, Any]) -> Dict[str, Any]:
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ–≤"""
    try:
        from models import Message
        
        print(f"\nüöÄ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–∞: {dialogue.get('id', 'unknown')}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
        dialogue_id = dialogue.get('id', 'test_dialogue')
        messages_data = convert_dialogue_to_messages(dialogue)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Message
        messages = []
        for msg_data in messages_data:
            message = Message(
                role=msg_data['role'],
                content=msg_data['content'],
                session_id=msg_data['session_id']
            )
            messages.append(message)
        
        print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–ø–∏–ø–∞—Å—Ç
        filtered_messages = []
        copypaste_count = 0
        
        for msg in messages:
            copy_paste_indicators = [
                "–ø–µ—Ä–µ–≤–µ–¥–∏", "–∏—Å–ø—Ä–∞–≤—å", "–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π",
                "def ", "class ", "import ", "function", "–∫–æ–¥:", "–∫–æ–¥ ",
                "—Å—Ç–∞—Ç—å—è", "—Ç–µ–∫—Å—Ç:", "–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–π–ª:", "—Å—Å—ã–ª–∫–∞:"
            ]
            
            is_copypaste = any(indicator in msg.content.lower() for indicator in copy_paste_indicators)
            
            if is_copypaste:
                copypaste_count += 1
            else:
                filtered_messages.append(msg)
        
        print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞: {copypaste_count}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
        facts = extract_facts_from_messages(messages_data)
        print(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {len(facts)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        if facts:
            print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")
            for i, fact in enumerate(facts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–∫—Ç–æ–≤
                print(f"  {i}. [{fact['type']}] {fact['content'][:100]}...")
        
        # –°–∂–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
        total_chars = sum(len(msg.content) for msg in filtered_messages)
        compressed_chars = int(total_chars * 0.7)
        compression_ratio = compressed_chars / total_chars if total_chars > 0 else 1.0
        
        print(f"üóúÔ∏è –°–∂–∞—Ç–∏–µ: {total_chars} -> {compressed_chars} —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {compression_ratio:.2f})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
        question = dialogue.get('question', '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?')
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        
        print(f"üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ {len(facts)} —Ñ–∞–∫—Ç–æ–≤...")
        answer = generate_answer_from_facts(question, facts)
        print(f"üí¨ –û—Ç–≤–µ—Ç: {answer}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'total_messages': len(messages),
            'filtered_messages': len(filtered_messages),
            'copypaste_filtered': copypaste_count,
            'sessions_created': len(dialogue.get('sessions', [])),
            'facts_extracted': len(facts),
            'compression_ratio': compression_ratio,
            'total_chars': total_chars,
            'compressed_chars': compressed_chars
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            'dialogue_id': dialogue_id,
            'question': question,
            'answer': answer,
            'extracted_facts': facts,
            'stats': stats,
            'total_messages': len(messages),
            'sessions_count': len(dialogue.get('sessions', [])),
            'timestamp': datetime.now().isoformat(),
            'system_version': 'model_inference_optimized.py (with facts)',
            'processing_method': 'simulation_with_fact_extraction'
        }
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return {
            'dialogue_id': dialogue.get('id', 'unknown'),
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


def save_results_to_files(results: List[Dict[str, Any]], output_dir: str = "optimized_test_results"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True, parents=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    for i, result in enumerate(results, 1):
        dialogue_id = result.get('dialogue_id', f'dialogue_{i}')
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"{dialogue_id}_with_facts_{timestamp}.json"
        filepath = output_path / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {filepath}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    summary_file = output_path / f"summary_with_facts_{timestamp}.json"
    with open(summary_file, 'w', encoding='utf-8') as f:
        json.dump({
            'total_dialogues': len(results),
            'timestamp': timestamp,
            'results': results
        }, f, ensure_ascii=False, indent=2)
    
    print(f"üìä –°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {summary_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ model_inference_optimized.py —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ–≤")
    print("üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    leaderboard_file = "data/format_example.jsonl"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(leaderboard_file):
        print(f"‚ùå –§–∞–π–ª {leaderboard_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    print(f"\nüìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –∏–∑ {leaderboard_file}...")
    dialogues = load_leaderboard_data(leaderboard_file)
    
    if not dialogues:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏!")
        return 1
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    results = []
    for i, dialogue in enumerate(dialogues, 1):
        print(f"\n{'='*60}")
        print(f"üìã –î–ò–ê–õ–û–ì {i}/{len(dialogues)}")
        print(f"{'='*60}")
        
        result = simulate_optimized_system_with_facts(dialogue)
        results.append(result)
        
        if 'error' in result:
            print(f"‚ùå –î–∏–∞–ª–æ–≥ {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        else:
            print(f"‚úÖ –î–∏–∞–ª–æ–≥ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    save_results_to_files(results)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"{'='*60}")
    
    successful = sum(1 for r in results if 'error' not in r)
    failed = len(results) - successful
    
    print(f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
    print(f"–° –æ—à–∏–±–∫–∞–º–∏: {failed}")
    
    if successful > 0:
        avg_messages = sum(r.get('total_messages', 0) for r in results if 'error' not in r) / successful
        avg_sessions = sum(r.get('sessions_count', 0) for r in results if 'error' not in r) / successful
        avg_copypaste = sum(r.get('stats', {}).get('copypaste_filtered', 0) for r in results if 'error' not in r) / successful
        avg_facts = sum(r.get('stats', {}).get('facts_extracted', 0) for r in results if 'error' not in r) / successful
        avg_compression = sum(r.get('stats', {}).get('compression_ratio', 1.0) for r in results if 'error' not in r) / successful
        
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {avg_messages:.1f}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {avg_sessions:.1f}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞: {avg_copypaste:.1f}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {avg_facts:.1f}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {avg_compression:.2f}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∞–∫—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: optimized_test_results/")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
