#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from models import Message
import logging
import time
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PromptGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.prompt_templates = {
            'work': "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context}",
            'family': "–û–ø–∏—à–∏ —Å–µ–º–µ–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context}",
            'location': "–ì–¥–µ –∂–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context}",
            'hobby': "–ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context}",
            'pets': "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context}",
            'education': "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –∏–ª–∏ –∏–∑—É—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context}",
            'general': "–ò—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        }
        
        self.fact_categories = {
            'work': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–±–æ—Ç–∞', '–∫–æ–º–ø–∞–Ω–∏—è', '—è–Ω–¥–µ–∫—Å', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
            'family': ['–∂–µ–Ω–∞', '–¥–æ—á—å', '—Å–µ–º—å—è', '–º–∞—Ä–∏—è', '–∞–Ω–Ω–∞', '—Ä–µ–±–µ–Ω–æ–∫'],
            'location': ['–º–æ—Å–∫–≤–∞', '–∂–∏–≤–µ—Ç', '—Å–æ–∫–æ–ª—å–Ω–∏–∫–∏', '—Ä–∞–π–æ–Ω', '–∞–¥—Ä–µ—Å'],
            'hobby': ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π', '—É–≤–ª–µ–∫–∞–µ—Ç—Å—è', '—Ö–æ–±–±–∏', '—Ä–∏—Å–æ–≤–∞—Ç—å', '–≤—ã—Ö–æ–¥–Ω—ã–µ'],
            'pets': ['—Å–æ–±–∞–∫–∞', '—Ä–µ–∫—Å', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–ø–∏—Ç–æ–º–µ—Ü'],
            'education': ['–∏–∑—É—á–∞–µ—Ç', '–æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
    
    def classify_question(self, question: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        question_lower = question.lower()
        
        for category, keywords in self.fact_categories.items():
            if any(keyword in question_lower for keyword in keywords):
                return category
        
        return 'general'
    
    def extract_context_from_memory(self, memory_data: List[str], question: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏"""
        question_lower = question.lower()
        relevant_contexts = []
        
        for memory_item in memory_data:
            memory_lower = memory_item.lower()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            question_words = set(question_lower.split())
            memory_words = set(memory_lower.split())
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
            if question_words.intersection(memory_words):
                relevant_contexts.append(memory_item)
        
        return "\n".join(relevant_contexts[:3])  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
    
    def generate_prompt(self, question: str, memory_data: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"""
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        category = self.classify_question(question)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.extract_context_from_memory(memory_data, question)
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
        if category == 'general':
            template = self.prompt_templates['general']
            return template.format(question=question, context=context)
        else:
            template = self.prompt_templates[category]
            return template.format(context=context)

class AdvancedPromptGenerator(PromptGenerator):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ —Å —Ñ–∞–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.extracted_facts = {
            'work': [],
            'family': [],
            'location': [],
            'hobby': [],
            'pets': [],
            'education': []
        }
    
    def extract_facts_from_text(self, text: str) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        facts = {category: [] for category in self.fact_categories.keys()}
        
        text_lower = text.lower()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ —Ä–∞–±–æ—Ç–µ
        if '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' in text_lower:
            facts['work'].append('–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º')
        if '—è–Ω–¥–µ–∫—Å' in text_lower:
            facts['work'].append('–†–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å')
        if 'python' in text_lower:
            facts['work'].append('–†–∞–±–æ—Ç–∞–µ—Ç —Å Python')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ —Å–µ–º—å–µ
        if '–∂–µ–Ω–∞' in text_lower:
            facts['family'].append('–ï—Å—Ç—å –∂–µ–Ω–∞')
        if '–¥–æ—á—å' in text_lower:
            facts['family'].append('–ï—Å—Ç—å –¥–æ—á—å')
        if '–∞–Ω–Ω–∞' in text_lower and '5 –ª–µ—Ç' in text_lower:
            facts['family'].append('–î–æ—á–µ—Ä–∏ 5 –ª–µ—Ç')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        if '–º–æ—Å–∫–≤–∞' in text_lower:
            facts['location'].append('–ñ–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ')
        if '—Å–æ–∫–æ–ª—å–Ω–∏–∫–∏' in text_lower:
            facts['location'].append('–ñ–∏–≤–µ—Ç –≤ —Ä–∞–π–æ–Ω–µ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ–± —É–≤–ª–µ—á–µ–Ω–∏—è—Ö
        if '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π' in text_lower:
            facts['hobby'].append('–£–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if '—Å–æ–±–∞–∫–∞' in text_lower and '—Ä–µ–∫—Å' in text_lower:
            facts['pets'].append('–ï—Å—Ç—å —Å–æ–±–∞–∫–∞ –ø–æ –∫–ª–∏—á–∫–µ –†–µ–∫—Å')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
        if '–∏–∑—É—á–∞–µ—Ç' in text_lower and '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏' in text_lower:
            facts['education'].append('–ò–∑—É—á–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏')
        
        return facts
    
    def update_facts(self, new_facts: Dict[str, List[str]]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤"""
        for category, fact_list in new_facts.items():
            self.extracted_facts[category].extend(fact_list)
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            self.extracted_facts[category] = list(set(self.extracted_facts[category]))
    
    def generate_enhanced_prompt(self, question: str, memory_data: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏"""
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        category = self.classify_question(question)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.extract_context_from_memory(memory_data, question)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        relevant_facts = []
        if category in self.extracted_facts:
            relevant_facts = self.extracted_facts[category]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã
        if category == 'general':
            for cat_facts in self.extracted_facts.values():
                relevant_facts.extend(cat_facts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt_parts = [
            "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
            "",
            "–í–û–ü–†–û–°: " + question,
            ""
        ]
        
        if relevant_facts:
            prompt_parts.append("–ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –§–ê–ö–¢–´:")
            for fact in relevant_facts[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ–≤
                prompt_parts.append(f"‚Ä¢ {fact}")
            prompt_parts.append("")
        
        if context:
            prompt_parts.extend([
                "–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–ê–ú–Ø–¢–ò:",
                context,
                ""
            ])
        
        prompt_parts.extend([
            "–ò–ù–°–¢–†–£–ö–¶–ò–ò:",
            "- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É",
            "- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º",
            "- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –≤ –¥–µ—Ç–∞–ª—è—Ö"
        ])
        
        return "\n".join(prompt_parts)

def demo_prompt_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    memory_data = [
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, —è —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å.",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∂–µ–Ω–∞ –ú–∞—Ä–∏—è –∏ –¥–æ—á—å –ê–Ω–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π 5 –ª–µ—Ç.",
        "–Ø –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ, –≤ —Ä–∞–π–æ–Ω–µ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏. –†–∞–±–æ—Ç–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ.",
        "–ú–æ—è –∂–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—á–∏—Ç–µ–ª–µ–º –≤ —à–∫–æ–ª–µ. –û–Ω–∞ –æ—á–µ–Ω—å –ª—é–±–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.",
        "–£ –Ω–∞—Å –µ—Å—Ç—å —Å–æ–±–∞–∫–∞ –ø–æ –∫–ª–∏—á–∫–µ –†–µ–∫—Å. –û–Ω –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.",
        "–Ø —É–≤–ª–µ–∫–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —á–∞—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—é —Å–µ–º—å—é –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö.",
        "–ù–∞—à–∞ –¥–æ—á—å —Ö–æ–¥–∏—Ç –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –∏ –æ—á–µ–Ω—å –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å.",
        "–Ø —Ä–∞–±–æ—Ç–∞—é —Å Python –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º. –ù–µ–¥–∞–≤–Ω–æ –∏–∑—É—á–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
    ]
    
    test_questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "–ö–∞–∫–∞—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–º—å—è?",
        "–ì–¥–µ –∂–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?",
        "–ö–∞–∫–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–ª–µ—á–µ–Ω–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö",
        "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?",
        "–ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –¥–æ—á–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –≤—Å–µ, —á—Ç–æ –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
    ]
    
    # 1. –ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
    print("\nüìù 1. –ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤:")
    print("-" * 50)
    
    basic_generator = PromptGenerator()
    
    for i, question in enumerate(test_questions[:3], 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
        prompt = basic_generator.generate_prompt(question, memory_data)
        print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
        print(prompt)
        print("-" * 30)
    
    # 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —Ñ–∞–∫—Ç–∞–º–∏
    print("\nüìä 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ–≤:")
    print("-" * 50)
    
    advanced_generator = AdvancedPromptGenerator()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏...")
    for memory_item in memory_data:
        facts = advanced_generator.extract_facts_from_text(memory_item)
        advanced_generator.update_facts(facts)
    
    print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")
    for category, facts in advanced_generator.extracted_facts.items():
        if facts:
            print(f"  {category.upper()}:")
            for fact in facts:
                print(f"    ‚Ä¢ {fact}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    print(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:")
    print("-" * 50)
    
    for i, question in enumerate(test_questions[:5], 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
        enhanced_prompt = advanced_generator.generate_enhanced_prompt(question, memory_data)
        print("–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
        print(enhanced_prompt)
        print("-" * 30)
    
    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
    print(f"\n‚öñÔ∏è 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤:")
    print("-" * 50)
    
    sample_question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–º—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    print(f"–í–æ–ø—Ä–æ—Å: {sample_question}")
    print("\n–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:")
    basic_prompt = basic_generator.generate_prompt(sample_question, memory_data)
    print(basic_prompt)
    
    print("\n–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    enhanced_prompt = advanced_generator.generate_enhanced_prompt(sample_question, memory_data)
    print(enhanced_prompt)
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
    print(f"‚úÖ –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤")
    print(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω—ã –±–∞–∑–æ–≤—ã–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥—ã")

if __name__ == "__main__":
    demo_prompt_generation()
