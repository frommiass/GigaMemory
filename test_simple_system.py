#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã GigaMemory –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç vllm
"""
import json
import sys
from pathlib import Path
from typing import List, Dict, Any
from models import Message

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))


class MockModelInference:
    """Mock –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def inference(self, messages: List[Message]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_message = messages[-1].content.lower()
        
        if "–∑–æ–≤—É—Ç" in last_message:
            return "–í–∞—Å –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤."
        elif "–ª–µ—Ç" in last_message:
            return "–í–∞–º 35 –ª–µ—Ç."
        elif "–∂–∏–≤–µ—Ç–µ" in last_message or "–∂–∏–≤—É" in last_message:
            return "–í—ã –∂–∏–≤–µ—Ç–µ –≤ –ú–æ—Å–∫–≤–µ."
        elif "—Ä–∞–±–æ—Ç–∞–µ—Ç–µ" in last_message or "—Ä–∞–±–æ—Ç–∞—é" in last_message:
            return "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –Ø–Ω–¥–µ–∫—Å–µ."
        else:
            return "–Ø –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."


class SimpleMemorySystem:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.memory = {}
        self.filter_cache = {}
        self.stats = {
            'total_messages': 0,
            'filtered_messages': 0,
            'copypaste_filtered': 0,
            'sessions_created': 0,
            'facts_extracted': 0,
            'compression_ratio': 1.0
        }
        self.model = MockModelInference()
    
    def is_copy_paste_content(self, text: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ø–∏–ø–∞—Å—Ç"""
        copy_paste_indicators = [
            "–ø–µ—Ä–µ–≤–µ–¥–∏", "–∏—Å–ø—Ä–∞–≤—å", "–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π",
            "def ", "class ", "import ", "function", "–∫–æ–¥:", "–∫–æ–¥ ",
            "—Å—Ç–∞—Ç—å—è", "—Ç–µ–∫—Å—Ç:", "–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–π–ª:", "—Å—Å—ã–ª–∫–∞:"
        ]
        text_lower = text.lower()
        return any(indicator in text_lower for indicator in copy_paste_indicators)
    
    def write_to_memory(self, messages: List[Message], dialogue_id: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        if dialogue_id not in self.memory:
            self.memory[dialogue_id] = []
        
        filtered_messages = []
        for msg in messages:
            self.stats['total_messages'] += 1
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–ø–∏–ø–∞—Å—Ç
            if self.is_copy_paste_content(msg.content):
                self.stats['copypaste_filtered'] += 1
                continue
            
            filtered_messages.append(msg)
            self.stats['filtered_messages'] += 1
        
        self.memory[dialogue_id].extend(filtered_messages)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        session_ids = set(msg.session_id for msg in filtered_messages)
        self.stats['sessions_created'] = len(session_ids)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
        self.stats['facts_extracted'] += len(filtered_messages) // 3
    
    def answer_to_question(self, dialogue_id: str, question: str) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–º—è—Ç—å"""
        if dialogue_id not in self.memory:
            return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_messages = self.memory[dialogue_id]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        question_msg = Message(
            role="user",
            content=question,
            session_id="question"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        all_messages = context_messages + [question_msg]
        
        return self.model.inference(all_messages)
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.stats.copy()
    
    def clear_memory(self, dialogue_id: str):
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
        if dialogue_id in self.memory:
            del self.memory[dialogue_id]


def load_dialogue(file_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def process_dialogue(dialogue: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        system = SimpleMemorySystem()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        dialogue_id = dialogue["id"]
        total_messages = 0
        
        for session in dialogue["sessions"]:
            messages = []
            for msg_data in session["messages"]:
                message = Message(
                    role=msg_data["role"],
                    content=msg_data["content"],
                    session_id=session["id"]
                )
                messages.append(message)
                total_messages += 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            system.write_to_memory(messages, dialogue_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = system.get_stats()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        question = dialogue.get("question", "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
        answer = system.answer_to_question(dialogue_id, question)
        
        return {
            "dialogue_id": dialogue_id,
            "question": question,
            "answer": answer,
            "stats": stats,
            "total_messages": total_messages
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return {
            "dialogue_id": dialogue["id"],
            "error": str(e)
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã GigaMemory")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    test_file = Path("test_dialogue_100k.jsonl")
    if not test_file.exists():
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python validate_system.py")
        return 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
    print("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥...")
    dialogue = load_dialogue(str(test_file))
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥: {dialogue['id']} —Å {len(dialogue['sessions'])} —Å–µ—Å—Å–∏—è–º–∏")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    print("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥...")
    result = process_dialogue(dialogue)
    
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–î–∏–∞–ª–æ–≥ ID: {result['dialogue_id']}")
    print(f"–í–æ–ø—Ä–æ—Å: {result['question']}")
    print(f"–û—Ç–≤–µ—Ç: {result['answer']}")
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['total_messages']}")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['stats']['filtered_messages']}")
    print(f"  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞: {result['stats']['copypaste_filtered']}")
    print(f"  –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {result['stats']['sessions_created']}")
    print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {result['stats']['facts_extracted']}")
    print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {result['stats']['compression_ratio']:.2f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = Path("simple_test_results.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
