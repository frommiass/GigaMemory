#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç VectorRAGInterface –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç vllm
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import torch
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_vector_rag_interface():
    """–¢–µ—Å—Ç VectorRAGInterface"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VectorRAGInterface")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from src.submit.embeddings.improved_vector_search import (
            ImprovedEmbeddingEngine,
            ImprovedVectorStore,
            EmbeddingConfig,
            SimilarityMetric
        )
        from src.submit.rag.vector_rag_interface import VectorRAGInterface
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ VectorRAGInterface...")
        rag = VectorRAGInterface(
            model_name="cointegrated/rubert-tiny2",
            use_gpu=torch.cuda.is_available(),
            enable_hybrid_search=True
        )
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {'CUDA' if torch.cuda.is_available() else 'CPU'}")
        print(f"   –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: {'–í–∫–ª—é—á–µ–Ω' if rag.enable_hybrid else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        print("\n2Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        dialogue_id = "test_dialogue_001"
        messages = [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, —è –∏–∑ –ú–æ—Å–∫–≤—ã."},
            {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–ª–µ–∫—Å–µ–π! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –¥–µ–ª–∞ –≤ –ú–æ—Å–∫–≤–µ?"},
            {"role": "user", "content": "–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞–±–æ—Ç–∞—é –¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Ç–∏—Å—Ç–æ–º –≤ –°–±–µ—Ä–µ."},
            {"role": "assistant", "content": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! Data Science - –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å."},
            {"role": "user", "content": "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—à–∫–∞ –ú—É—Ä–∫–∞ –∏ —Å–æ–±–∞–∫–∞ –†–µ–∫—Å."},
            {"role": "assistant", "content": "–ó–¥–æ—Ä–æ–≤–æ! –ú—É—Ä–∫–∞ –∏ –†–µ–∫—Å - –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤."},
            {"role": "user", "content": "–Ø —É–≤–ª–µ–∫–∞—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏."},
            {"role": "assistant", "content": "–û—Ç–ª–∏—á–Ω–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ! ML –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω—ã."},
        ]
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        print("\n3Ô∏è‚É£ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞...")
        rag.add_dialogue(dialogue_id, messages)
        print(f"‚úÖ –î–∏–∞–ª–æ–≥ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ
        if dialogue_id in rag.stores:
            store = rag.stores[dialogue_id]
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {store.size()}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        test_queries = [
            "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            "–ì–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?", 
            "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–∏—Ç–æ–º—Ü—ã?",
            "–ß–µ–º —è —É–≤–ª–µ–∫–∞—é—Å—å?",
            "–û—Ç–∫—É–¥–∞ —è?"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\n   {i}. –í–æ–ø—Ä–æ—Å: {query}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = rag.get_relevant_context(query, dialogue_id, top_k=2)
            
            if context:
                print("   üìö –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
                lines = context.split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if line.strip():
                        print(f"      {line[:80]}...")
            else:
                print("   ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        new_question = "–ö–∞–∫ –∑–æ–≤—É—Ç –º–æ—é –∫–æ—à–∫—É –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?"
        enhanced = rag.process_message(new_question, dialogue_id, role="user")
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {new_question}")
        print(f"   –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
        print(f"   {enhanced[:200]}...")
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏...")
        test_save_path = "./test_vector_indices"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        rag.save(test_save_path)
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_save_path}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
        rag2 = VectorRAGInterface()
        rag2.load(test_save_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        test_query = "–ø–∏—Ç–æ–º—Ü—ã"
        results = rag2.search(test_query, dialogue_id, top_k=1)
        
        if results:
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {results[0]['text'][:50]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n7Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        if dialogue_id in rag.stores:
            store = rag.stores[dialogue_id]
            analytics = store.get_analytics()
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {analytics.total_documents}")
            print(f"   –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {analytics.total_searches}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {analytics.avg_search_time*1000:.2f} –º—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        emb_stats = rag.embedding_engine.get_stats()
        print(f"   –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {emb_stats['total_encoded']}")
        print(f"   Cache hit rate: {emb_stats['cache_hit_rate']:.1%}")
        
        # –û—á–∏—Å—Ç–∫–∞
        print("\n8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        if Path(test_save_path).exists():
            import shutil
            shutil.rmtree(test_save_path)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_embedding_components():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print("=" * 50)
    
    try:
        from src.submit.embeddings.improved_vector_search import (
            ImprovedEmbeddingEngine,
            ImprovedVectorStore,
            EmbeddingConfig,
            SimilarityMetric
        )
        
        # –¢–µ—Å—Ç EmbeddingEngine
        print("1Ô∏è‚É£ –¢–µ—Å—Ç ImprovedEmbeddingEngine...")
        config = EmbeddingConfig(
            model_name="cointegrated/rubert-tiny2",
            device="cpu",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            batch_size=16,
            use_cache=True
        )
        
        engine = ImprovedEmbeddingEngine(config)
        print("‚úÖ EmbeddingEngine —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        test_texts = ["–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"]
        embeddings = engine.encode(test_texts)
        print(f"‚úÖ –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape}")
        
        # –¢–µ—Å—Ç VectorStore
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç ImprovedVectorStore...")
        store = ImprovedVectorStore(
            metric=SimilarityMetric.COSINE,
            enable_analytics=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for i, (text, embedding) in enumerate(zip(test_texts, embeddings)):
            store.add(
                doc_id=f"doc_{i}",
                vector=embedding,
                text=text,
                metadata={'index': i}
            )
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {store.size()} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        query_embedding = engine.encode("–º–∏—Ä")
        results = store.search(query_embedding, k=2)
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for result in results:
            print(f"   - {result.doc_id}: {result.score:.3f}")
        
        # –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        hybrid_results = store.hybrid_search(
            query_vector=query_embedding,
            query_text="–º–∏—Ä",
            k=2
        )
        
        print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(hybrid_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for result in hybrid_results:
            print(f"   - {result.doc_id}: {result.score:.3f}")
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ì–û RAG –î–õ–Ø GIGAMEMORY")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PyTorch
    print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"CUDA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch.cuda.get_device_name()}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_passed = test_embedding_components()
    test2_passed = test_vector_rag_interface()
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 30)
    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"VectorRAGInterface: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("VectorRAGInterface –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ GigaMemory!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
