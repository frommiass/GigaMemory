# examples/optimization_usage.py
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import time
import numpy as np
from pathlib import Path
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
from src.submit.modules.optimization.module import OptimizationModule


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    # ==========================================
    # 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    # ==========================================
    print("=" * 50)
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    config = {
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è L1 –∫—ç—à–∞ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π, –≤ –ø–∞–º—è—Ç–∏)
        'l1_cache_size': 50,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è L2 –∫—ç—à–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à)
        'l2_cache_size': 1000,
        'l2_cache_memory': 256,  # –ú–ë
        'eviction_strategy': 'lru',
        'default_ttl': 3600,  # 1 —á–∞—Å
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è L3 –∫—ç—à–∞ (–¥–∏—Å–∫–æ–≤—ã–π)
        'disk_cache_path': './cache_storage',
        'l3_cache_max_age_days': 7,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        'batch_size': 32,
        'max_wait': 1.0,
        'num_workers': 4
    }
    
    optimizer = OptimizationModule(config)
    print(f"‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å 3-—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫—ç—à–µ–º")
    print(f"   L1: {config['l1_cache_size']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   L2: {config['l2_cache_size']} –∑–∞–ø–∏—Å–µ–π, {config['l2_cache_memory']}MB")
    print(f"   L3: {config['disk_cache_path']}")
    
    # ==========================================
    # 2. –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
    # ==========================================
    print("\n" + "=" * 50)
    print("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    test_data = {
        'user_profile': {'id': 123, 'name': 'John', 'preferences': ['tech', 'science']},
        'session_data': {'session_id': 'abc123', 'start_time': time.time()},
        'computed_result': np.random.rand(100, 50).mean()
    }
    
    for key, value in test_data.items():
        optimizer.cache_put(key, value)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à: {key}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–±—É–¥–µ—Ç –∏–∑ L1)
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞:")
    for key in test_data.keys():
        value = optimizer.cache_get(key)
        if value is not None:
            print(f"   ‚úì {key}: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫—ç—à–µ–π
    cache_sizes = optimizer.get_cache_sizes()
    print(f"\nüìà –†–∞–∑–º–µ—Ä—ã –∫—ç—à–µ–π:")
    print(f"   L1: {cache_sizes['l1_entries']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   L2: {cache_sizes['l2_entries']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   L3: {cache_sizes['l3_entries']} —Ñ–∞–π–ª–æ–≤")
    
    # ==========================================
    # 3. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –î–ê–ù–ù–´–•
    # ==========================================
    print("\n" + "=" * 50)
    print("3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    optimizer.optimize_for_embeddings()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    embeddings = np.random.rand(1000, 768).astype(np.float32)  # –¢–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä BERT
    print(f"üìä –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {embeddings.nbytes / 1024:.2f} KB")
    
    optimizer.cache_put('embeddings_batch', embeddings)
    print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π (float16)")
    
    # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
    optimizer.optimize_for_text()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    large_text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. " * 1000
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–æ —Å–∂–∞—Ç–∏—è: {len(large_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    optimizer.cache_put('large_document', large_text)
    print("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å–æ —Å–∂–∞—Ç–∏–µ–º")
    
    # ==========================================
    # 4. –ë–ê–¢–ß–ï–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –° –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú–ò
    # ==========================================
    print("\n" + "=" * 50)
    print("4. –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    tasks = []
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    for i in range(3):
        tasks.append({
            'id': f'critical_{i}',
            'data': f'–ö—Ä–∏—Ç–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ {i}',
            'priority': 9,
            'type': 'critical'
        })
    
    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for i in range(10):
        tasks.append({
            'id': f'normal_{i}',
            'data': f'–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ {i}',
            'priority': 5,
            'type': 'normal'
        })
    
    # –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for i in range(5):
        tasks.append({
            'id': f'low_{i}',
            'data': f'–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {i}',
            'priority': 1,
            'type': 'background'
        })
    
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á:")
    print(f"   –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: 3 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 9)")
    print(f"   –û–±—ã—á–Ω—ã—Ö: 10 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)")
    print(f"   –§–æ–Ω–æ–≤—ã—Ö: 5 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)")
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processed_order = []
    
    def process_task(task: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É"""
        processed_order.append(task['id'])
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if task['type'] == 'critical':
            time.sleep(0.05)  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö
        else:
            time.sleep(0.01)
        
        return {
            'task_id': task['id'],
            'result': f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {task['data']}",
            'processed_at': time.time()
        }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    print("\n‚öôÔ∏è –ó–∞–ø—É—Å–∫ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    start_time = time.time()
    
    result = optimizer.batch_process_priority(tasks, process_task)
    
    processing_time = time.time() - start_time
    
    if result.success:
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result.data)} –∑–∞–¥–∞—á –∑–∞ {processing_time:.2f} —Å–µ–∫")
        print(f"   –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {result.metadata['high_priority_count']}")
        print(f"   –û–±—ã—á–Ω—ã—Ö: {result.metadata['normal_priority_count']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüìä –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 5):")
        for i, task_id in enumerate(processed_order[:5], 1):
            print(f"   {i}. {task_id}")
    
    # ==========================================
    # 5. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    # ==========================================
    print("\n" + "=" * 50)
    print("5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
    print("‚öôÔ∏è –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏...")
    
    for i in range(100):
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        key = f"test_key_{i}"
        value = f"test_value_{i}"
        optimizer.cache_put(key, value)
        
        # –ß—Ç–µ–Ω–∏–µ (90% –ø–æ–ø–∞–¥–∞–Ω–∏–π)
        if i % 10 < 9:
            optimizer.cache_get(f"test_key_{i}")
        else:
            optimizer.cache_get(f"missing_key_{i}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    perf_report = optimizer.get_performance_report()
    
    if perf_report.success:
        report_data = perf_report.data
        
        print("\nüìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"\nüéØ –ö—ç—à:")
        print(f"   Hit Rate: {report_data['cache_hit_rate']:.2%}")
        print(f"   L1 –ø–æ–ø–∞–¥–∞–Ω–∏–π: {report_data['cache_stats']['l1_hits']}")
        print(f"   L2 –ø–æ–ø–∞–¥–∞–Ω–∏–π: {report_data['cache_stats']['l2_hits']}")
        print(f"   L3 –ø–æ–ø–∞–¥–∞–Ω–∏–π: {report_data['cache_stats']['l3_hits']}")
        print(f"   –ü—Ä–æ–º–∞—Ö–æ–≤: {report_data['cache_stats']['misses']}")
        
        print(f"\nüì¶ –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
        batch_stats = report_data['batch_stats']
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {batch_stats['total_processed']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {batch_stats['batch_count']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–∞—Ç—á–∞: {batch_stats['avg_batch_time_ms']:.2f} –º—Å")
        
        print(f"\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:")
        resources = report_data['resource_usage']
        print(f"   –ü–∞–º—è—Ç—å: {resources['memory_usage_mb']:.2f} MB")
        print(f"   CPU: {resources['cpu_usage_percent']:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if 'trends' in report_data and report_data['trends']:
            trends = report_data['trends']
            print(f"\nüìà –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            print(f"   –¢—Ä–µ–Ω–¥: {trends.get('trend', 'N/A')}")
            if 'avg_processing_time' in trends:
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {trends['avg_processing_time']:.3f} —Å–µ–∫")
    
    # ==========================================
    # 6. –ü–†–û–ì–†–ï–í –ö–≠–®–ê
    # ==========================================
    print("\n" + "=" * 50)
    print("6. –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
    warmup_data = [
        ('config:app', {'version': '1.0', 'features': ['cache', 'batch']}),
        ('user:preferences', {'theme': 'dark', 'language': 'ru'}),
        ('model:weights', np.random.rand(100, 100)),
        ('vocab:tokens', ['token1', 'token2', 'token3']),
        ('stats:global', {'requests': 0, 'errors': 0})
    ]
    
    print(f"üì¶ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ {len(warmup_data)} –∑–∞–ø–∏—Å—è–º–∏...")
    optimizer.warmup_cache(warmup_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
    for key, _ in warmup_data:
        if optimizer.cache_get(key) is not None:
            print(f"   ‚úì {key}: —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    # ==========================================
    # 7. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê
    # ==========================================
    print("\n" + "=" * 50)
    print("7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–ø–æ–ª–Ω—è–µ–º L1 –∫—ç—à
    print("‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ L1 –∫—ç—à–∞...")
    for i in range(100):  # –ù–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º L1 —Ä–∞–∑–º–µ—Ä
        optimizer.cache_put(f'overflow_{i}', f'value_{i}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    cache_sizes = optimizer.get_cache_sizes()
    print(f"‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print(f"   L1 —Ä–∞–∑–º–µ—Ä: {cache_sizes['l1_entries']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {config['l1_cache_size'] * 2})")
    
    # ==========================================
    # 8. –†–ê–ë–û–¢–ê –° –†–ê–ó–ù–´–ú–ò –¢–ò–ü–ê–ú–ò –ö–≠–®–ê
    # ==========================================
    print("\n" + "=" * 50)
    print("8. –†–∞–±–æ—Ç–∞ —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫—ç—à–∞")
    print("=" * 50)
    
    # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
    embedding_cache_key = 'user_embedding_123'
    user_embedding = np.random.rand(768).astype(np.float32)
    optimizer.l2_cache.put(embedding_cache_key, user_embedding, cache_type='embedding')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –§–∞–∫—Ç—ã
    facts_cache_key = 'session_facts_abc'
    extracted_facts = [
        {'fact': 'User prefers Python', 'confidence': 0.95},
        {'fact': 'User works with ML', 'confidence': 0.88},
        {'fact': 'User likes optimization', 'confidence': 0.92}
    ]
    optimizer.l2_cache.put(facts_cache_key, extracted_facts, cache_type='fact')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã {len(extracted_facts)} –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
    
    # –°–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    compression_cache_key = 'compressed_log'
    log_data = "ERROR " * 1000 + "WARNING " * 500 + "INFO " * 2000
    optimizer.l2_cache.put(compression_cache_key, log_data, cache_type='compression')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–∂–∞—Ç—ã–µ –ª–æ–≥–∏ ({len(log_data)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    query_cache_key = 'search_results_ml'
    search_results = {
        'query': 'machine learning optimization',
        'results': ['result1', 'result2', 'result3'],
        'timestamp': time.time()
    }
    optimizer.l2_cache.put(query_cache_key, search_results, cache_type='query')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    
    # ==========================================
    # 9. –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ë–ê–¢–ß–ï–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
    # ==========================================
    print("\n" + "=" * 50)
    print("9. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –±–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("=" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    def text_processor(batch_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        results = []
        for task_id, text in batch_data:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
            result = {
                'task_id': task_id,
                'word_count': len(text.split()),
                'char_count': len(text)
            }
            results.append(result)
        return results
    
    def number_processor(batch_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∏—Å–µ–ª"""
        results = []
        for task_id, numbers in batch_data:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            result = {
                'task_id': task_id,
                'sum': sum(numbers),
                'mean': sum(numbers) / len(numbers) if numbers else 0
            }
            results.append(result)
        return results
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    optimizer.batch_processor.register_task_type('text_processing', text_processor)
    optimizer.batch_processor.register_task_type('number_processing', number_processor)
    
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for i in range(10):
        text = f"This is text number {i} with some words to process"
        optimizer.batch_processor.add_task(f'text_{i}', text, 'text_processing')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for i in range(10):
        numbers = list(range(i, i + 10))
        optimizer.batch_processor.add_task(f'numbers_{i}', numbers, 'number_processing')
    
    # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    time.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text_results = optimizer.batch_processor.get_batch_results('text_processing')
    number_results = optimizer.batch_processor.get_batch_results('number_processing')
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á: {len(text_results)}")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∑–∞–¥–∞—á: {len(number_results)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    batch_stats = optimizer.batch_processor.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {batch_stats['total_tasks']}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {batch_stats['processed_tasks']}")
    print(f"   –û—à–∏–±–æ–∫: {batch_stats['failed_tasks']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–∞—Ç—á–∞: {batch_stats['avg_batch_time']:.3f} —Å–µ–∫")
    
    # ==========================================
    # 10. –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
    # ==========================================
    print("\n" + "=" * 50)
    print("10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("=" * 50)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ L2 –∫—ç—à–∞
    cache_backup_path = './cache_backup.pkl'
    optimizer.l2_cache.save(cache_backup_path)
    print(f"üíæ L2 –∫—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {cache_backup_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    final_sizes = optimizer.get_cache_sizes()
    final_report = optimizer.get_performance_report()
    
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   L1: {final_sizes['l1_entries']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   L2: {final_sizes['l2_entries']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   L3: {final_sizes['l3_entries']} —Ñ–∞–π–ª–æ–≤")
    print(f"   Hit Rate: {final_report.data['cache_hit_rate']:.2%}")
    
    # ==========================================
    # 11. –û–ß–ò–°–¢–ö–ê
    # ==========================================
    print("\n" + "=" * 50)
    print("11. –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("=" * 50)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    optimizer.batch_processor.shutdown()
    print("‚úÖ –ë–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
    optimizer.clear_all_caches()
    print("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if Path(cache_backup_path).exists():
        Path(cache_backup_path).unlink()
    print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 50)


def demonstrate_advanced_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    print("\n" + "=" * 50)
    print("–ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò")
    print("=" * 50)
    
    config = {
        'l1_cache_size': 20,
        'l2_cache_size': 200,
        'l2_cache_memory': 128,
        'disk_cache_path': './advanced_cache',
        'batch_size': 16,
        'num_workers': 2
    }
    
    optimizer = OptimizationModule(config)
    
    # ==========================================
    # A. –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
    # ==========================================
    print("\nüìä A. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫")
    
    def adaptive_optimization():
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        report = optimizer.get_performance_report()
        if not report.success:
            return
        
        data = report.data
        hit_rate = data['cache_hit_rate']
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä L1 –∫—ç—à–∞
        if hit_rate < 0.7:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º L1 –µ—Å–ª–∏ –Ω–∏–∑–∫–∏–π hit rate
            optimizer.l1_max_size = min(optimizer.l1_max_size * 1.5, 1000)
            print(f"   üìà L1 —Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {optimizer.l1_max_size}")
        elif hit_rate > 0.95:
            # –ú–æ–∂–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –µ—Å–ª–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π hit rate
            optimizer.l1_max_size = max(optimizer.l1_max_size * 0.8, 10)
            print(f"   üìâ L1 —Ä–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–µ–Ω –¥–æ {optimizer.l1_max_size}")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        avg_batch_time = data['batch_stats']['avg_batch_time_ms']
        if avg_batch_time > 100:  # –ï—Å–ª–∏ –±–∞—Ç—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
            new_batch_size = max(optimizer.batch_processor.batch_size // 2, 4)
            optimizer.batch_processor.batch_size = new_batch_size
            print(f"   üìâ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —É–º–µ–Ω—å—à–µ–Ω –¥–æ {new_batch_size}")
        elif avg_batch_time < 20:  # –ï—Å–ª–∏ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
            new_batch_size = min(optimizer.batch_processor.batch_size * 2, 128)
            optimizer.batch_processor.batch_size = new_batch_size
            print(f"   üìà –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {new_batch_size}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é
    for iteration in range(3):
        print(f"\n   –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}:")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        for i in range(50):
            optimizer.cache_put(f'adaptive_{iteration}_{i}', f'value_{i}')
            if i % 3 == 0:
                optimizer.cache_get(f'adaptive_{iteration}_{i}')
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º
        adaptive_optimization()
    
    # ==========================================
    # B. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –° –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï–ú
    # ==========================================
    print("\nüîÆ B. –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    class PredictiveCache:
        """–ö—ç—à —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        def __init__(self, optimizer):
            self.optimizer = optimizer
            self.access_patterns = {}
            
        def access(self, key: str):
            """–î–æ—Å—Ç—É–ø —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º"""
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            if key not in self.access_patterns:
                self.access_patterns[key] = []
            self.access_patterns[key].append(time.time())
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            value = self.optimizer.cache_get(key)
            
            # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._prefetch_related(key)
            
            return value
        
        def _prefetch_related(self, key: str):
            """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ key_N, 
            # –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫–æ—Ä–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è key_N+1
            if '_' in key:
                prefix, suffix = key.rsplit('_', 1)
                try:
                    next_idx = int(suffix) + 1
                    next_key = f"{prefix}_{next_idx}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ L2/L3, –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –≤ L1
                    if next_key not in self.optimizer.l1_cache:
                        value = self.optimizer.cache_get(next_key)
                        if value is not None:
                            print(f"      üîÆ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω: {next_key}")
                except ValueError:
                    pass
    
    predictive = PredictiveCache(optimizer)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    print("   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º:")
    for i in range(5):
        key = f"sequential_{i}"
        optimizer.cache_put(key, f"data_{i}")
    
    # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    predictive.access("sequential_0")
    # –°–ª–µ–¥—É—é—â–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω
    predictive.access("sequential_1")
    
    # ==========================================
    # C. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï (–°–ò–ú–£–õ–Ø–¶–ò–Ø)
    # ==========================================
    print("\nüåê C. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    class DistributedCache:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        
        def __init__(self, nodes: int = 3):
            self.nodes = []
            for i in range(nodes):
                config_node = config.copy()
                config_node['disk_cache_path'] = f'./cache_node_{i}'
                self.nodes.append(OptimizationModule(config_node))
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {nodes} —É–∑–ª–æ–≤ –∫—ç—à–∞")
        
        def _hash_to_node(self, key: str) -> int:
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–∑–µ–ª –ø–æ —Ö–µ—à—É –∫–ª—é—á–∞"""
            return hash(key) % len(self.nodes)
        
        def put(self, key: str, value: Any):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª"""
            node_idx = self._hash_to_node(key)
            self.nodes[node_idx].cache_put(key, value)
            print(f"      ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —É–∑–µ–ª {node_idx}: {key}")
        
        def get(self, key: str) -> Any:
            """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞"""
            node_idx = self._hash_to_node(key)
            value = self.nodes[node_idx].cache_get(key)
            if value is not None:
                print(f"      ‚Üê –ü–æ–ª—É—á–µ–Ω–æ —Å —É–∑–ª–∞ {node_idx}: {key}")
            return value
        
        def get_total_stats(self) -> Dict:
            """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ –≤—Å–µ—Ö —É–∑–ª–æ–≤"""
            total_entries = 0
            total_hits = 0
            total_misses = 0
            
            for i, node in enumerate(self.nodes):
                report = node.get_performance_report()
                if report.success:
                    stats = report.data['cache_stats']
                    total_hits += stats.get('hits', 0)
                    total_misses += stats.get('misses', 0)
                    
                    sizes = node.get_cache_sizes()
                    total_entries += sizes['l1_entries'] + sizes['l2_entries']
            
            return {
                'total_entries': total_entries,
                'total_hits': total_hits,
                'total_misses': total_misses,
                'hit_rate': total_hits / (total_hits + total_misses) if (total_hits + total_misses) > 0 else 0
            }
    
    distributed = DistributedCache(nodes=3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–∑–ª–∞–º:")
    for i in range(10):
        distributed.put(f'distributed_{i}', f'value_{i}')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\n   –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    for i in range(0, 10, 3):
        distributed.get(f'distributed_{i}')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    dist_stats = distributed.get_total_stats()
    print(f"\n   üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞:")
    print(f"      –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {dist_stats['total_entries']}")
    print(f"      Hit Rate: {dist_stats['hit_rate']:.2%}")
    
    # –û—á–∏—Å—Ç–∫–∞
    for node in distributed.nodes:
        node.clear_all_caches()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    print("=" * 50)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    main()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    demonstrate_advanced_features()