#!/usr/bin/env python
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG
"""
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def test_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ–∞–∫—Ç-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    try:
        from submit.questions.fact_based_classifier import FactBasedQuestionClassifier
        print("‚úÖ FactBasedQuestionClassifier –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FactBasedQuestionClassifier: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç RAG –¥–≤–∏–∂–∫–∞
    try:
        from submit.rag.fact_based_rag import FactBasedRAGEngine
        print("‚úÖ FactBasedRAGEngine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FactBasedRAGEngine: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Ñ–∞–∫—Ç–æ–≤
    try:
        from submit.extraction.fact_models import FactType, Fact, FactConfidence, FactRelation
        print("‚úÖ –ú–æ–¥–µ–ª–∏ —Ñ–∞–∫—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π —Ñ–∞–∫—Ç–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤
    try:
        from submit.extraction.fact_database import FactDatabase
        print("‚úÖ FactDatabase –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FactDatabase: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    try:
        classifier = FactBasedQuestionClassifier()
        print("‚úÖ FactBasedQuestionClassifier —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FactBasedQuestionClassifier: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤
    try:
        fact_database = FactDatabase()
        print("‚úÖ FactDatabase —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FactDatabase: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ RAG –¥–≤–∏–∂–∫–∞
    try:
        rag_engine = FactBasedRAGEngine(fact_database)
        print("‚úÖ FactBasedRAGEngine —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FactBasedRAGEngine: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    test_questions = [
        "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?",
        "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∞—è –ø–æ—Ä–æ–¥–∞ —É –º–æ–µ–π —Å–æ–±–∞–∫–∏?",
        "–°–∏–≥–∞—Ä–µ—Ç—ã –∫–∞–∫–æ–π –º–∞—Ä–∫–∏ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é?",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?"
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for question in test_questions:
        try:
            fact_type, confidence = classifier.classify_question(question)
            print(f"  '{question}' -> {fact_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ '{question}': {e}")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for question in test_questions:
        try:
            prompt, metadata = rag_engine.process_question(question, "test_dialogue")
            print(f"  '{question}' -> {metadata['strategy']} (—Ñ–∞–∫—Ç–æ–≤: {metadata['facts_found']})")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{question}': {e}")
            return False
    
    print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_components()
    sys.exit(0 if success else 1)


