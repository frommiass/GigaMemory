#!/usr/bin/env python
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ vllm
"""
import argparse
import json
import sys
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def load_dialogue(file_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def extract_facts_from_messages(messages: List[Dict[str, Any]]) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    facts = []
    
    for msg in messages:
        content = msg.get("content", "")
        role = msg.get("role", "")
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ - –∏—â–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if role == "user" and content:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∏—â–µ–º —Ñ–∞–∫—Ç—ã
            sentences = content.split('.')
            for sentence in sentences:
                sentence = sentence.strip()
                if sentence and len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–∫—Ç–∞
                    facts.append(sentence)
    
    return facts


def create_prompt_from_dialogue(dialogue: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id = dialogue.get("id", "unknown")
    question = dialogue.get("question", "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    all_messages = []
    for session in dialogue.get("sessions", []):
        for msg in session.get("messages", []):
            all_messages.append(msg)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
    facts = extract_facts_from_messages(all_messages)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_parts = [
        f"–î–∏–∞–ª–æ–≥ ID: {dialogue_id}",
        f"–í–æ–ø—Ä–æ—Å: {question}",
        "",
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    recent_messages = all_messages[-10:] if len(all_messages) > 10 else all_messages
    for msg in recent_messages:
        role = msg.get("role", "")
        content = msg.get("content", "")
        prompt_parts.append(f"{role}: {content}")
    
    prompt_parts.extend([
        "",
        "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:",
    ])
    
    for i, fact in enumerate(facts[:5], 1):  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–∫—Ç–æ–≤
        prompt_parts.append(f"{i}. {fact}")
    
    prompt_parts.extend([
        "",
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
    ])
    
    return "\n".join(prompt_parts)


def process_dialogue(dialogue: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç"""
    try:
        dialogue_id = dialogue.get("id", "unknown")
        question = dialogue.get("question", "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = create_prompt_from_dialogue(dialogue)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_messages = 0
        for session in dialogue.get("sessions", []):
            total_messages += len(session.get("messages", []))
        
        return {
            "dialogue_id": dialogue_id,
            "question": question,
            "prompt": prompt,
            "total_messages": total_messages,
            "sessions_count": len(dialogue.get("sessions", [])),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return {
            "dialogue_id": dialogue.get("id", "unknown"),
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


def run_inference(dataset_path: str, output_path: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ: {dataset_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = Path(output_path)
    output_dir.mkdir(exist_ok=True, parents=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dialogues = []
    with open(dataset_path, 'r', encoding='utf-8') as f:
        for line in f:
            if line.strip():
                dialogues.append(json.loads(line))
    
    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    results = []
    prompts = []
    
    for i, dialogue in enumerate(dialogues):
        print(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ {i+1}/{len(dialogues)}: {dialogue.get('id', 'unknown')}")
        result = process_dialogue(dialogue)
        results.append(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        if "prompt" in result:
            prompts.append({
                "dialogue_id": result["dialogue_id"],
                "prompt": result["prompt"]
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = output_dir / "results.jsonl"
    with open(output_file, 'w', encoding='utf-8') as f:
        for result in results:
            f.write(json.dumps(result, ensure_ascii=False) + '\n')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    prompts_file = output_dir / "prompts.jsonl"
    with open(prompts_file, 'w', encoding='utf-8') as f:
        for prompt_data in prompts:
            f.write(json.dumps(prompt_data, ensure_ascii=False) + '\n')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    prompts_dir = output_dir / "prompt_files"
    prompts_dir.mkdir(exist_ok=True)
    
    for i, prompt_data in enumerate(prompts):
        prompt_file = prompts_dir / f"prompt_{prompt_data['dialogue_id']}.txt"
        with open(prompt_file, 'w', encoding='utf-8') as f:
            f.write(prompt_data["prompt"])
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    print(f"üíæ –ü—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {prompts_file}")
    print(f"üíæ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {prompts_dir}")
    print("‚úÖ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    return 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Simple Dialogue Inference")
    parser.add_argument("--dataset", type=str, required=True, help="–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
    parser.add_argument("--output", type=str, default="./simple_output", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    args = parser.parse_args()
    
    return run_inference(args.dataset, args.output)


if __name__ == "__main__":
    sys.exit(main())


