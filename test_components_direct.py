#!/usr/bin/env python
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def test_classifier_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FactBasedQuestionClassifier...")
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    class FactType:
        WORK_OCCUPATION = "work_occupation"
        PERSONAL_NAME = "personal_name"
        PERSONAL_AGE = "personal_age"
        FAMILY_STATUS = "family_status"
        SPORT_TYPE = "sport_type"
        PET_TYPE = "pet_type"
        TRANSPORT_CAR_BRAND = "transport_car_brand"
        DRINK_COFFEE = "drink_coffee"
        FINANCE_INCOME = "finance_income"
        EDUCATION_INSTITUTION = "education_institution"
        HOBBY_ACTIVITY = "hobby_activity"
        HEALTH_CONDITION = "health_condition"
        PROPERTY_TYPE = "property_type"
        CONTACT_PHONE = "contact_phone"
        CONTACT_EMAIL = "contact_email"
    
    class FactBasedQuestionClassifier:
        def __init__(self):
            self.question_patterns = {
                FactType.WORK_OCCUPATION: [
                    r'–∫–µ–º\s+(?:—è\s+)?—Ä–∞–±–æ—Ç–∞',
                    r'(?:–º–æ—è\s+)?(?:–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)',
                    r'—á–µ–º\s+(?:—è\s+)?–∑–∞–Ω–∏–º–∞',
                ],
                FactType.PERSONAL_NAME: [
                    r'–∫–∞–∫\s+(?:–º–µ–Ω—è\s+)?–∑–æ–≤—É—Ç',
                    r'(?:–º–æ–µ|–º–æ—ë)\s+–∏–º—è',
                    r'–∫—Ç–æ\s+—è(?:\s+—Ç–∞–∫–æ–π)?',
                ],
                FactType.PERSONAL_AGE: [
                    r'—Å–∫–æ–ª—å–∫–æ\s+(?:–º–Ω–µ\s+)?–ª–µ—Ç',
                    r'(?:–º–æ–π\s+)?–≤–æ–∑—Ä–∞—Å—Ç',
                    r'–∫–æ–≥–¥–∞\s+(?:—è\s+)?—Ä–æ–¥–∏–ª',
                ],
                FactType.SPORT_TYPE: [
                    r'(?:–∫–∞–∫–∏–º\s+)?—Å–ø–æ—Ä—Ç–æ–º\s+(?:—è\s+)?(?:–∑–∞–Ω–∏–º–∞—é—Å—å|—É–≤–ª–µ–∫–∞—é—Å—å)',
                    r'(?:–º–æ–∏\s+)?(?:—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏|—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ\s+–Ω–∞–≥—Ä—É–∑–∫–∏)',
                ],
                FactType.PET_TYPE: [
                    r'(?:–∫–∞–∫–∏–µ\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:–ø–∏—Ç–æ–º—Ü—ã|–∂–∏–≤–æ—Ç–Ω—ã–µ)',
                    r'–µ—Å—Ç—å\s+–ª–∏\s+(?:—É\s+–º–µ–Ω—è\s+)?(?:–∫–æ—Ç|–∫–æ—à–∫–∞|—Å–æ–±–∞–∫–∞)',
                    r'(?:–∫–∞–∫–∞—è\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:—Å–æ–±–∞–∫–∞|–∫–æ—à–∫–∞)',
                ],
                FactType.TRANSPORT_CAR_BRAND: [
                    r'(?:–∫–∞–∫–∞—è\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:–º–∞—à–∏–Ω–∞|–∞–≤—Ç–æ|—Ç–∞—á–∫–∞)',
                    r'(?:–º–∞—Ä–∫–∞|–±—Ä–µ–Ω–¥)\s+(?:–º–æ–µ–π\s+)?(?:–º–∞—à–∏–Ω—ã|–∞–≤—Ç–æ)',
                    r'–Ω–∞\s+—á–µ–º\s+(?:—è\s+)?(?:–µ–∑–∂—É|–∫–∞—Ç–∞—é—Å—å)',
                ],
                FactType.DRINK_COFFEE: [
                    r'(?:–∫–∞–∫–æ–π\s+)?–∫–æ—Ñ–µ\s+(?:—è\s+)?(?:–ø—å—é|–ª—é–±–ª—é)',
                    r'(?:–ø—å—é\s+–ª–∏\s+—è\s+)?–∫–æ—Ñ–µ',
                ],
                FactType.FINANCE_INCOME: [
                    r'(?:–º–æ–π\s+)?(?:–¥–æ—Ö–æ–¥|–∑–∞—Ä–∞–±–æ—Ç–æ–∫)',
                    r'—Å–∫–æ–ª—å–∫–æ\s+(?:—è\s+)?(?:–ø–æ–ª—É—á–∞—é|–∏–º–µ—é)',
                ],
                FactType.EDUCATION_INSTITUTION: [
                    r'–≥–¥–µ\s+(?:—è\s+)?(?:—É—á–∏–ª—Å—è|—É—á–∏–ª–∞—Å—å|—É—á—É—Å—å)',
                    r'(?:–º–æ–π\s+)?(?:—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç|–∏–Ω—Å—Ç–∏—Ç—É—Ç|–≤—É–∑)',
                    r'(?:–∫–∞–∫–æ–µ\s+)?(?:—É\s+–º–µ–Ω—è\s+)?–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                ],
                FactType.HOBBY_ACTIVITY: [
                    r'(?:–º–æ–∏\s+)?(?:—Ö–æ–±–±–∏|—É–≤–ª–µ—á–µ–Ω–∏—è|–∏–Ω—Ç–µ—Ä–µ—Å—ã)',
                    r'—á–µ–º\s+(?:—è\s+)?(?:—É–≤–ª–µ–∫–∞—é—Å—å|–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å)',
                    r'(?:–º–æ–µ|–º–æ—ë)\s+(?:–ª—é–±–∏–º–æ–µ\s+)?(?:–∑–∞–Ω—è—Ç–∏–µ|–¥–µ–ª–æ)',
                ],
                FactType.HEALTH_CONDITION: [
                    r'(?:–º–æ–µ|–º–æ—ë)\s+(?:–∑–¥–æ—Ä–æ–≤—å–µ|—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)',
                    r'(?:—á–µ–º\s+)?(?:—è\s+)?(?:–±–æ–ª–µ—é|–±–æ–ª–µ–ª)',
                    r'(?:–º–æ–∏\s+)?(?:–±–æ–ª–µ–∑–Ω–∏|–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è)',
                ],
                FactType.PROPERTY_TYPE: [
                    r'(?:–≥–¥–µ|–∫–∞–∫)\s+(?:—è\s+)?–∂–∏–≤—É',
                    r'(?:–º–æ—è\s+)?(?:–∫–≤–∞—Ä—Ç–∏—Ä–∞|–¥–æ–º|–∂–∏–ª—å–µ)',
                    r'(?:—Å–∫–æ–ª—å–∫–æ\s+)?–∫–æ–º–Ω–∞—Ç',
                ],
                FactType.CONTACT_PHONE: [
                    r'(?:–º–æ–π\s+)?(?:–Ω–æ–º–µ—Ä|—Ç–µ–ª–µ—Ñ–æ–Ω)',
                    r'(?:–∫–∞–∫\s+)?(?:—Å–æ\s+–º–Ω–æ–π\s+)?(?:—Å–≤—è–∑–∞—Ç—å—Å—è|–ø–æ–∑–≤–æ–Ω–∏—Ç—å)',
                ],
                FactType.CONTACT_EMAIL: [
                    r'(?:–º–æ–π\s+)?(?:email|–ø–æ—á—Ç–∞|–º–µ–π–ª)',
                    r'(?:—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è\s+)?–ø–æ—á—Ç–∞',
                ],
            }
        
        def classify_question(self, question: str):
            question_lower = question.lower().strip().rstrip('?')
            
            best_match = None
            best_confidence = 0.0
            
            for fact_type, patterns in self.question_patterns.items():
                for pattern in patterns:
                    match = re.search(pattern, question_lower)
                    if match:
                        matched_length = len(match.group())
                        total_length = len(question_lower)
                        confidence = matched_length / total_length if total_length > 0 else 0.5
                        
                        if matched_length == total_length:
                            confidence = 1.0
                        
                        if confidence > best_confidence:
                            best_match = fact_type
                            best_confidence = confidence
            
            return best_match, best_confidence
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    classifier = FactBasedQuestionClassifier()
    
    test_questions = [
        "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?",
        "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∞—è –ø–æ—Ä–æ–¥–∞ —É –º–æ–µ–π —Å–æ–±–∞–∫–∏?",
        "–°–∏–≥–∞—Ä–µ—Ç—ã –∫–∞–∫–æ–π –º–∞—Ä–∫–∏ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é?",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for question in test_questions:
        fact_type, confidence = classifier.classify_question(question)
        print(f"  '{question}' -> {fact_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
    
    print("‚úÖ FactBasedQuestionClassifier —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

def test_rag_engine_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG –¥–≤–∏–∂–æ–∫ –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FactBasedRAGEngine...")
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é RAG –¥–≤–∏–∂–∫–∞
    class FactType:
        WORK_OCCUPATION = "work_occupation"
        PERSONAL_NAME = "personal_name"
        PERSONAL_AGE = "personal_age"
        SPORT_TYPE = "sport_type"
        PET_TYPE = "pet_type"
        TRANSPORT_CAR_BRAND = "transport_car_brand"
        DRINK_COFFEE = "drink_coffee"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–¥–µ—Å—å –∂–µ
    class FactBasedQuestionClassifier:
        def __init__(self):
            self.question_patterns = {
                FactType.WORK_OCCUPATION: [
                    r'–∫–µ–º\s+(?:—è\s+)?—Ä–∞–±–æ—Ç–∞',
                    r'(?:–º–æ—è\s+)?(?:–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)',
                    r'—á–µ–º\s+(?:—è\s+)?–∑–∞–Ω–∏–º–∞',
                ],
                FactType.PERSONAL_NAME: [
                    r'–∫–∞–∫\s+(?:–º–µ–Ω—è\s+)?–∑–æ–≤—É—Ç',
                    r'(?:–º–æ–µ|–º–æ—ë)\s+–∏–º—è',
                    r'–∫—Ç–æ\s+—è(?:\s+—Ç–∞–∫–æ–π)?',
                ],
                FactType.PERSONAL_AGE: [
                    r'—Å–∫–æ–ª—å–∫–æ\s+(?:–º–Ω–µ\s+)?–ª–µ—Ç',
                    r'(?:–º–æ–π\s+)?–≤–æ–∑—Ä–∞—Å—Ç',
                    r'–∫–æ–≥–¥–∞\s+(?:—è\s+)?—Ä–æ–¥–∏–ª',
                ],
                FactType.SPORT_TYPE: [
                    r'(?:–∫–∞–∫–∏–º\s+)?—Å–ø–æ—Ä—Ç–æ–º\s+(?:—è\s+)?(?:–∑–∞–Ω–∏–º–∞—é—Å—å|—É–≤–ª–µ–∫–∞—é—Å—å)',
                    r'(?:–º–æ–∏\s+)?(?:—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏|—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ\s+–Ω–∞–≥—Ä—É–∑–∫–∏)',
                ],
                FactType.PET_TYPE: [
                    r'(?:–∫–∞–∫–∏–µ\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:–ø–∏—Ç–æ–º—Ü—ã|–∂–∏–≤–æ—Ç–Ω—ã–µ)',
                    r'–µ—Å—Ç—å\s+–ª–∏\s+(?:—É\s+–º–µ–Ω—è\s+)?(?:–∫–æ—Ç|–∫–æ—à–∫–∞|—Å–æ–±–∞–∫–∞)',
                    r'(?:–∫–∞–∫–∞—è\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:—Å–æ–±–∞–∫–∞|–∫–æ—à–∫–∞)',
                ],
                FactType.TRANSPORT_CAR_BRAND: [
                    r'(?:–∫–∞–∫–∞—è\s+)?(?:—É\s+–º–µ–Ω—è\s+)?(?:–º–∞—à–∏–Ω–∞|–∞–≤—Ç–æ|—Ç–∞—á–∫–∞)',
                    r'(?:–º–∞—Ä–∫–∞|–±—Ä–µ–Ω–¥)\s+(?:–º–æ–µ–π\s+)?(?:–º–∞—à–∏–Ω—ã|–∞–≤—Ç–æ)',
                    r'–Ω–∞\s+—á–µ–º\s+(?:—è\s+)?(?:–µ–∑–∂—É|–∫–∞—Ç–∞—é—Å—å)',
                ],
                FactType.DRINK_COFFEE: [
                    r'(?:–∫–∞–∫–æ–π\s+)?–∫–æ—Ñ–µ\s+(?:—è\s+)?(?:–ø—å—é|–ª—é–±–ª—é)',
                    r'(?:–ø—å—é\s+–ª–∏\s+—è\s+)?–∫–æ—Ñ–µ',
                ],
            }
        
        def classify_question(self, question: str):
            question_lower = question.lower().strip().rstrip('?')
            
            best_match = None
            best_confidence = 0.0
            
            for fact_type, patterns in self.question_patterns.items():
                for pattern in patterns:
                    match = re.search(pattern, question_lower)
                    if match:
                        matched_length = len(match.group())
                        total_length = len(question_lower)
                        confidence = matched_length / total_length if total_length > 0 else 0.5
                        
                        if matched_length == total_length:
                            confidence = 1.0
                        
                        if confidence > best_confidence:
                            best_match = fact_type
                            best_confidence = confidence
            
            return best_match, best_confidence
    
    class FactDatabase:
        def __init__(self):
            self.facts = []
        
        def query_facts(self, dialogue_id: str, fact_type: str = None, 
                       min_confidence: float = 0.0, query: str = None):
            return []
    
    class FactBasedRAGEngine:
        def __init__(self, fact_database):
            self.fact_database = fact_database
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
            self.classifier = None
        
        def process_question(self, question: str, dialogue_id: str):
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if self.classifier is None:
                self.classifier = FactBasedQuestionClassifier()
            
            fact_type, confidence = self.classifier.classify_question(question)
            
            if not fact_type:
                return self._process_unknown_question(question, dialogue_id)
            
            relevant_facts = self.fact_database.query_facts(
                dialogue_id,
                fact_type=fact_type,
                min_confidence=0.5
            )
            
            if relevant_facts:
                return self._create_fact_based_prompt(question, relevant_facts, fact_type)
            else:
                return self._create_no_info_prompt(question, fact_type)
        
        def _create_fact_based_prompt(self, question: str, facts, fact_type: str):
            prompt = f"–¢–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n"
            for fact in facts:
                prompt += f"‚Ä¢ {fact}\n"
            prompt += f"\n–í–æ–ø—Ä–æ—Å: {question}\n"
            prompt += "–û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤."
            
            metadata = {
                'strategy': 'fact_based',
                'fact_type': fact_type,
                'facts_found': len(facts)
            }
            
            return prompt, metadata
        
        def _create_no_info_prompt(self, question: str, fact_type: str):
            no_info_responses = {
                FactType.WORK_OCCUPATION: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.PERSONAL_NAME: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.PERSONAL_AGE: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.SPORT_TYPE: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.PET_TYPE: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.TRANSPORT_CAR_BRAND: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                FactType.DRINK_COFFEE: "–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –∫–æ—Ñ–µ.",
            }
            
            response = no_info_responses.get(
                fact_type,
                f"–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
            )
            
            metadata = {
                'strategy': 'no_info',
                'fact_type': fact_type,
                'facts_found': 0
            }
            
            return response, metadata
        
        def _process_unknown_question(self, question: str, dialogue_id: str):
            prompt = f"–í –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
            metadata = {
                'strategy': 'keyword_search',
                'fact_type': None,
                'facts_found': 0
            }
            return prompt, metadata
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –¥–≤–∏–∂–æ–∫
    fact_database = FactDatabase()
    rag_engine = FactBasedRAGEngine(fact_database)
    
    test_questions = [
        "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?",
        "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∞—è –ø–æ—Ä–æ–¥–∞ —É –º–æ–µ–π —Å–æ–±–∞–∫–∏?",
        "–°–∏–≥–∞—Ä–µ—Ç—ã –∫–∞–∫–æ–π –º–∞—Ä–∫–∏ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é?",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for question in test_questions:
        prompt, metadata = rag_engine.process_question(question, "test_dialogue")
        print(f"  '{question}' -> {metadata['strategy']} (—Ñ–∞–∫—Ç–æ–≤: {metadata['facts_found']})")
        print(f"    –û—Ç–≤–µ—Ç: {prompt[:100]}...")
    
    print("‚úÖ FactBasedRAGEngine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

if __name__ == "__main__":
    success1 = test_classifier_direct()
    success2 = test_rag_engine_direct()
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    
    sys.exit(0 if (success1 and success2) else 1)
