#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from models import Message
import logging
import time
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MockModelInference:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è ModelInference"""
    
    def __init__(self, model_path: str):
        self.model_path = model_path
        print(f"ü§ñ MockModelInference –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {model_path}")
    
    def inference(self, messages: List[Message]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        system_message = None
        for msg in messages:
            if msg.role == 'system':
                system_message = msg.content
                break
        
        if system_message:
            if "—Ä–∞–±–æ—Ç–∞" in system_message.lower():
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å."
            elif "—Å–µ–º—å—è" in system_message.lower():
                return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∂–µ–Ω–∞ –ú–∞—Ä–∏—è –∏ –¥–æ—á—å –ê–Ω–Ω–∞ 5 –ª–µ—Ç."
            elif "–∂–∏–≤–µ—Ç" in system_message.lower():
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ, –≤ —Ä–∞–π–æ–Ω–µ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏."
            elif "—É–≤–ª–µ—á–µ–Ω–∏—è" in system_message.lower():
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π."
            elif "–∂–∏–≤–æ—Ç–Ω—ã–µ" in system_message.lower():
                return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ–±–∞–∫–∞ –ø–æ –∫–ª–∏—á–∫–µ –†–µ–∫—Å."
            elif "–∏–∑—É—á–∞–µ—Ç" in system_message.lower():
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç Python –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ."
            elif "–∂–µ–Ω–∞" in system_message.lower():
                return "–ñ–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç —É—á–∏—Ç–µ–ª–µ–º –≤ —à–∫–æ–ª–µ."
            elif "–¥–æ—á—å" in system_message.lower():
                return "–î–æ—á–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 5 –ª–µ—Ç."
        
        return "–Ø –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

class MockEmbeddingEngine:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è EmbeddingEngine"""
    
    def __init__(self):
        print("üîç MockEmbeddingEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def encode(self, texts: List[str]) -> List[List[float]]:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏"""
        embeddings = []
        for text in texts:
            # –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö" —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            hash_val = hash(text) % 1000
            embedding = [hash_val / 1000.0] * 384  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            embeddings.append(embedding)
        return embeddings

class MockVectorStore:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è VectorStore"""
    
    def __init__(self):
        self.documents = {}
        self.embeddings = {}
        print("üìö MockVectorStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def add_documents(self, documents: List[str], embeddings: List[List[float]], 
                     metadata: List[Dict] = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        for i, (doc, emb) in enumerate(zip(documents, embeddings)):
            doc_id = f"doc_{len(self.documents)}"
            self.documents[doc_id] = doc
            self.embeddings[doc_id] = emb
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    def search(self, query_embedding: List[float], top_k: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É
        results = []
        for doc_id, emb in self.embeddings.items():
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            similarity = sum(a * b for a, b in zip(query_embedding, emb)) / len(emb)
            results.append({
                'document': self.documents[doc_id],
                'similarity': similarity,
                'metadata': {'doc_id': doc_id}
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
        results.sort(key=lambda x: x['similarity'], reverse=True)
        return results[:top_k]

class MockFactExtractor:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è FactExtractor"""
    
    def __init__(self):
        print("üìù MockFactExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_facts_from_text(self, text: str, session_id: str, dialogue_id: str) -> List:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–∫-—Ñ–∞–∫—Ç—ã"""
        facts = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in text.lower():
            facts.append({
                'type': 'work',
                'content': '–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º',
                'confidence': 0.9
            })
        
        if "—è–Ω–¥–µ–∫—Å" in text.lower():
            facts.append({
                'type': 'work',
                'content': '–†–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å',
                'confidence': 0.8
            })
        
        if "–∂–µ–Ω–∞" in text.lower():
            facts.append({
                'type': 'family',
                'content': '–ï—Å—Ç—å –∂–µ–Ω–∞',
                'confidence': 0.9
            })
        
        if "–¥–æ—á—å" in text.lower():
            facts.append({
                'type': 'family',
                'content': '–ï—Å—Ç—å –¥–æ—á—å',
                'confidence': 0.9
            })
        
        if "–º–æ—Å–∫–≤–∞" in text.lower():
            facts.append({
                'type': 'location',
                'content': '–ñ–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ',
                'confidence': 0.8
            })
        
        if "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π" in text.lower():
            facts.append({
                'type': 'hobby',
                'content': '–£–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π',
                'confidence': 0.7
            })
        
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(facts)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        return facts

class MockCompressor:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è Compressor"""
    
    def __init__(self):
        print("üóúÔ∏è MockCompressor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def compress(self, text: str) -> Dict[str, Any]:
        """–°–∂–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        compressed = text[:100] + "..." if len(text) > 100 else text
        ratio = len(compressed) / len(text) if len(text) > 0 else 1.0
        
        return {
            'compressed_text': compressed,
            'compression_ratio': ratio,
            'original_length': len(text),
            'compressed_length': len(compressed)
        }

class MockRAGEngine:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è RAG Engine"""
    
    def __init__(self):
        self.embedding_engine = MockEmbeddingEngine()
        self.vector_store = MockVectorStore()
        self.fact_extractor = MockFactExtractor()
        self.compressor = MockCompressor()
        print("üéØ MockRAGEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def index_dialogue_compressed(self, dialogue_id: str, sessions: Dict[str, List[Message]]) -> Dict[str, Any]:
        """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥"""
        print(f"üìö –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}")
        
        documents = []
        embeddings = []
        facts_count = 0
        compression_stats = {'total_ratio': 0.0, 'count': 0}
        
        for session_id, messages in sessions.items():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            session_text = " ".join([msg.content for msg in messages])
            
            # –°–∂–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
            compression_result = self.compressor.compress(session_text)
            compressed_text = compression_result['compressed_text']
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            embedding = self.embedding_engine.encode([compressed_text])[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            documents.append(compressed_text)
            embeddings.append(embedding)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
            facts = self.fact_extractor.extract_facts_from_text(session_text, session_id, dialogue_id)
            facts_count += len(facts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∂–∞—Ç–∏—è
            compression_stats['total_ratio'] += compression_result['compression_ratio']
            compression_stats['count'] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.vector_store.add_documents(documents, embeddings)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
        avg_compression_ratio = compression_stats['total_ratio'] / compression_stats['count'] if compression_stats['count'] > 0 else 1.0
        
        return {
            'sessions_indexed': len(sessions),
            'facts_extracted': facts_count,
            'compression': {
                'ratio': avg_compression_ratio,
                'total_sessions': compression_stats['count']
            }
        }
    
    def process_question(self, question: str, dialogue_id: str, memory: List[Message]) -> tuple:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"""
        print(f"‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞
        query_embedding = self.embedding_engine.encode([question])[0]
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        similar_docs = self.vector_store.search(query_embedding, top_k=3)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        for doc in similar_docs:
            context_parts.append(f"- {doc['document']}")
        
        context = "\n".join(context_parts)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–ê–ú–Ø–¢–ò:
{context}

–í–û–ü–†–û–°: {question}

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        
        return prompt, {'similar_docs': len(similar_docs)}

class MockOptimizedSmartMemory:
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è OptimizedSmartMemory"""
    
    def __init__(self, model_path: str = "/mock/model/path"):
        print("üß† MockOptimizedSmartMemory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        self.model = MockModelInference(model_path)
        self.rag_engine = MockRAGEngine()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.metrics = {
            'total_queries': 0,
            'avg_query_time': 0.0,
            'cache_hit_rate': 0.0,
            'compression_ratio': 0.0,
            'facts_per_dialogue': 0.0
        }
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def process_dialogue_optimized(self, dialogue_id: str, messages: List[Message]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}")
        
        start_time = time.time()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º (–ø—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)
        sessions = {}
        current_session = "session_1"
        sessions[current_session] = messages
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ RAG
        stats = self.rag_engine.index_dialogue_compressed(dialogue_id, sessions)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.update({
            'dialogue_id': dialogue_id,
            'messages_count': len(messages),
            'sessions_count': len(sessions),
            'processing_time': time.time() - start_time,
            'cache_used': False
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.metrics['compression_ratio'] = stats['compression']['ratio']
        self.metrics['facts_per_dialogue'] = stats['facts_extracted']
        
        return stats
    
    def answer_question_optimized(self, dialogue_id: str, question: str) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        print(f"‚ùì –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}")
        
        start_time = time.time()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG
        prompt, metadata = self.rag_engine.process_question(question, dialogue_id, [])
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        context_message = Message('system', prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer = self.model.inference([context_message])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        query_time = time.time() - start_time
        self.metrics['total_queries'] += 1
        self.metrics['avg_query_time'] = (
            0.1 * query_time + 0.9 * self.metrics['avg_query_time']
        )
        
        return answer.strip()
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'metrics': self.metrics,
            'cache': {'hit_rate': 0.85, 'total_entries': 150},
            'queues': {'embedding_queue': 0, 'fact_queue': 0, 'compression_queue': 0},
            'rag': {'total_documents': 8, 'avg_similarity': 0.75},
            'compression': {'avg_ratio': self.metrics['compression_ratio']}
        }
    
    def save_state(self, save_dir: str = "./test_state"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ {save_dir}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

def test_mock_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–∫-—Å–∏—Å—Ç–µ–º—É"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∫-—Å–∏—Å—Ç–µ–º—ã SmartMemory")
    print("=" * 60)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫-—Å–∏—Å—Ç–µ–º—ã...")
        memory = MockOptimizedSmartMemory()
        
        # 2. –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\nüìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_messages = [
            Message(role="user", content="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, —è —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å."),
            Message(role="user", content="–£ –º–µ–Ω—è –µ—Å—Ç—å –∂–µ–Ω–∞ –ú–∞—Ä–∏—è –∏ –¥–æ—á—å –ê–Ω–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π 5 –ª–µ—Ç."),
            Message(role="user", content="–Ø –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ, –≤ —Ä–∞–π–æ–Ω–µ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏. –†–∞–±–æ—Ç–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ."),
            Message(role="user", content="–ú–æ—è –∂–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—á–∏—Ç–µ–ª–µ–º –≤ —à–∫–æ–ª–µ. –û–Ω–∞ –æ—á–µ–Ω—å –ª—é–±–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É."),
            Message(role="user", content="–£ –Ω–∞—Å –µ—Å—Ç—å —Å–æ–±–∞–∫–∞ –ø–æ –∫–ª–∏—á–∫–µ –†–µ–∫—Å. –û–Ω –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."),
            Message(role="user", content="–Ø —É–≤–ª–µ–∫–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —á–∞—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—é —Å–µ–º—å—é –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö."),
            Message(role="user", content="–ù–∞—à–∞ –¥–æ—á—å —Ö–æ–¥–∏—Ç –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –∏ –æ—á–µ–Ω—å –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å."),
            Message(role="user", content="–Ø —Ä–∞–±–æ—Ç–∞—é —Å Python –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º. –ù–µ–¥–∞–≤–Ω–æ –∏–∑—É—á–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."),
        ]
        
        dialogue_id = "test_dialogue_1"
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}...")
        stats = memory.process_dialogue_optimized(dialogue_id, test_messages)
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for key, value in stats.items():
            if isinstance(value, (int, float)):
                print(f"  {key}: {value}")
            elif isinstance(value, dict):
                print(f"  {key}:")
                for sub_key, sub_value in value.items():
                    print(f"    {sub_key}: {sub_value}")
        
        # 4. –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        print(f"\n‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        test_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–ö–∞–∫–∞—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–º—å—è?",
            "–ì–¥–µ –∂–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?",
            "–ö–∞–∫–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–ª–µ—á–µ–Ω–∏—è?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö",
            "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?",
            "–ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
            "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –¥–æ—á–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
        ]
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        print("\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:")
        print("-" * 40)
        
        for i, question in enumerate(test_questions, 1):
            print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
            try:
                answer = memory.answer_question_optimized(dialogue_id, question)
                print(f"   –û—Ç–≤–µ—Ç: {answer}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print("-" * 40)
        system_stats = memory.get_system_stats()
        
        for category, stats in system_stats.items():
            print(f"\n{category.upper()}:")
            for key, value in stats.items():
                if isinstance(value, dict):
                    print(f"  {key}:")
                    for sub_key, sub_value in value.items():
                        print(f"    {sub_key}: {sub_value}")
                else:
                    print(f"  {key}: {value}")
        
        # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        memory.save_state("./test_state")
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_mock_system()
