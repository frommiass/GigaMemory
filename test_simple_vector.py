#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è GigaMemory
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from submit.embeddings.embedding_engine import EmbeddingEngine, EmbeddingConfig
from submit.embeddings.vector_store import VectorStore, SimpleVectorStore


def test_embedding_engine():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\n=== –¢–µ—Å—Ç EmbeddingEngine ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    config = EmbeddingConfig(
        model_name="cointegrated/rubert-tiny2",
        device="cpu",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Ç–µ—Å—Ç–∞
        use_cache=True
    )
    engine = EmbeddingEngine(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    texts = [
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –º–Ω–µ 30 –ª–µ—Ç",
        "–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ú—É—Ä–∫–∞",
        "–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º",
        "–ú–æ—è –∂–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ä–∞—á–æ–º",
        "–ú—ã –∂–∏–≤–µ–º –≤ –ú–æ—Å–∫–≤–µ —É–∂–µ 5 –ª–µ—Ç"
    ]
    
    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    print(f"–ö–æ–¥–∏—Ä—É–µ–º {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
    embeddings = engine.encode(texts)
    
    print(f"–†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape}")
    print(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {engine.get_embedding_dim()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    query = "–ö–∞–∫ –∑–æ–≤—É—Ç –º–æ—é –∫–æ—à–∫—É?"
    query_embedding = engine.encode(query)
    
    print(f"\n–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    for i, text in enumerate(texts):
        similarity = engine.similarity(embeddings[i], query_embedding)
        print(f"  {similarity:.3f} - {text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
    print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    embeddings_cached = engine.encode(texts[0])
    print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(engine.cache)}")
    
    return engine, embeddings, texts


def test_vector_store(engine, embeddings, texts):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    print("\n=== –¢–µ—Å—Ç VectorStore ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    store = VectorStore(metric="cosine", normalize=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    print(f"–î–æ–±–∞–≤–ª—è–µ–º {len(texts)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    for i, (text, embedding) in enumerate(zip(texts, embeddings)):
        metadata = {
            "session_id": f"session_{i}",
            "dialogue_id": "test_dialogue",
            "index": i
        }
        store.add(f"doc_{i}", embedding, metadata, text)
    
    print(f"–†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {store.size()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    queries = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–ì–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–∏—Ç–æ–º—Ü—ã?",
        "–ß–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?",
        "–ì–¥–µ —è –∂–∏–≤—É?"
    ]
    
    for query in queries:
        print(f"\n–ü–æ–∏—Å–∫: '{query}'")
        query_embedding = engine.encode(query)
        results = store.search(query_embedding, k=3)
        
        for result in results:
            print(f"  [{result.score:.3f}] {result.text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
    print("\n\n–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º (—Ç–æ–ª—å–∫–æ session_0 - session_2):")
    query = "—Ä–∞–±–æ—Ç–∞"
    query_embedding = engine.encode(query)
    
    for i in range(3):
        filter_metadata = {"session_id": f"session_{i}"}
        results = store.search(query_embedding, k=1, filter_metadata=filter_metadata)
        if results:
            print(f"  session_{i}: [{results[0].score:.3f}] {results[0].text}")
    
    return store


def test_simple_store():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    print("\n=== –¢–µ—Å—Ç SimpleVectorStore ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    config = EmbeddingConfig(model_name="cointegrated/rubert-tiny2", device="cpu")
    engine = EmbeddingEngine(config)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    store = SimpleVectorStore()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    texts = [
        "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python",
        "–ú–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫ - Python",
        "JavaScript —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–∏–π —è–∑—ã–∫",
        "–Ø –∏–∑—É—á–∞—é –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
    ]
    
    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º
    embeddings = engine.encode(texts)
    store.add_texts(texts, embeddings)
    
    # –ü–æ–∏—Å–∫
    query = "–ö–∞–∫–æ–π –º–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?"
    query_embedding = engine.encode(query)
    results = store.search_by_text(query_embedding, k=3)
    
    print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for text, score in results:
        print(f"  [{score:.3f}] {text}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è GigaMemory")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç 1: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
        engine, embeddings, texts = test_embedding_engine()
        print("\n‚úÖ EmbeddingEngine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        store = test_vector_store(engine, embeddings, texts)
        print("\n‚úÖ VectorStore —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 3: SimpleVectorStore
        test_simple_store()
        print("\n‚úÖ SimpleVectorStore —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\n" + "="*60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\n–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ GigaMemory!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())


