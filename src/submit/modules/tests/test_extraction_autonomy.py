#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ ExtractionModule
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
"""

import sys
import logging
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_module_autonomy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ"""
    
    print("üî¨ –¢–ï–°–¢ –ê–í–¢–û–ù–û–ú–ù–û–°–¢–ò EXTRACTION MODULE")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –º–æ–¥—É–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    import sys
    import os
    sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))
    from src.submit.modules.extraction.module import ExtractionModule
    
    print("\n‚úÖ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    config = {
        'min_confidence': 0.5,
        'use_rules': True,
        'use_llm': False,
        'conflict_strategy': 'latest',
        'filter_copypaste': True
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
    extractor = ExtractionModule(config)
    print("  ‚úì –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º set_dependencies - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å!
    print("\n‚úÖ –®–∞–≥ 2: –†–∞–±–æ—Ç–∞ –ë–ï–ó optimizer")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –º–Ω–µ 28 –ª–µ—Ç.",
        "–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –Ø–Ω–¥–µ–∫—Å–µ.",
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—Ç –ë–∞—Ä—Å–∏–∫ –∏ —Å–æ–±–∞–∫–∞ –†–µ–∫—Å.",
        "–í—á–µ—Ä–∞ –∂–µ–Ω–∏–ª—Å—è –Ω–∞ –ú–∞—Ä–∏–∏!",
        "–†–∞–Ω—å—à–µ –∂–∏–ª –≤ –ú–æ—Å–∫–≤–µ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ –ü–∏—Ç–µ—Ä."
    ]
    
    dialogue_id = "test_autonomy"
    facts_total = 0
    
    print("\nüìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    for i, text in enumerate(test_texts):
        result = extractor.extract_facts(
            text,
            {'dialogue_id': dialogue_id, 'session_id': f'session_{i}'}
        )
        
        if result.success:
            facts_count = len(result.data)
            facts_total += facts_count
            print(f"  –°–µ—Å—Å–∏—è {i}: –∏–∑–≤–ª–µ—á–µ–Ω–æ {facts_count} —Ñ–∞–∫—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            for fact in result.data[:2]:  # –ü–µ—Ä–≤—ã–µ 2
                print(f"    - {fact.type.value}: {fact.object}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.error}")
    
    print(f"\n  ‚úì –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {facts_total} —Ñ–∞–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –ù–ï –ø–∞–¥–∞–µ—Ç –±–µ–∑ optimizer
    assert facts_total > 0, "–ú–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ñ–∞–∫—Ç—ã –±–µ–∑ optimizer"
    
    print("\n‚úÖ –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ –ë–ï–ó –∫—ç—à–∞")
    
    queries = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–ì–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–∏—Ç–æ–º—Ü—ã?",
        "–ñ–µ–Ω–∞—Ç –ª–∏ —è?"
    ]
    
    for query in queries:
        result = extractor.query_facts(dialogue_id, query)
        
        if result.success and result.data:
            print(f"  ‚úì '{query}' -> –Ω–∞–π–¥–µ–Ω–æ {len(result.data)} —Ñ–∞–∫—Ç–æ–≤")
            if result.data:
                fact = result.data[0]
                print(f"    –û—Ç–≤–µ—Ç: {fact.object}")
        else:
            print(f"  - '{query}' -> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n‚úÖ –®–∞–≥ 4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ë–ï–ó –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π")
    
    profile_result = extractor.get_user_profile(dialogue_id)
    
    if profile_result.success:
        profile = profile_result.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã
        critical = profile.get('critical_facts', {})
        
        print(f"\n  üìã –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"    –ò–º—è: {critical.get('name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        print(f"    –í–æ–∑—Ä–∞—Å—Ç: {critical.get('age', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"    –†–∞–±–æ—Ç–∞: {critical.get('occupation', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}")
        print(f"    –°—Ç–∞—Ç—É—Å: {critical.get('marital_status', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
        
        stats = profile.get('stats', {})
        print(f"\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"    –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: {stats.get('total_facts', 0)}")
        print(f"    –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {stats.get('conflicts_resolved', 0)}")
    
    print("\n‚úÖ –®–∞–≥ 5: Timeline –∏–∑–º–µ–Ω–µ–Ω–∏–π –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    timeline = extractor.get_fact_timeline(dialogue_id, 'personal_location')
    
    if timeline:
        print(f"\n  üìÖ –ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
        for entry in timeline:
            status = "—Ç–µ–∫—É—â–µ–µ" if entry.get('is_current') else "–ø—Ä–æ—à–ª–æ–µ"
            print(f"    - {entry['value']} ({status})")
    
    print("\n‚úÖ –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–¥—É–ª—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –ù–ï –∏–º–µ–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
    assert not hasattr(extractor, 'storage') or extractor.storage is None
    assert not hasattr(extractor, 'embeddings') or extractor.embeddings is None
    assert not hasattr(extractor, 'model_inference') or extractor.model_inference is None
    
    # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - optimizer (–∏ —Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
    assert extractor.optimizer is None, "Optimizer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –±–µ–∑ set_dependencies"
    
    print("  ‚úì –ú–æ–¥—É–ª—å –Ω–µ –∏–º–µ–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π")
    print("  ‚úì –ú–æ–¥—É–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = extractor.get_stats()
    
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {stats['module_stats']['total_extracted']}")
    print(f"  –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats['module_stats']['cache_hits']} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")
    print(f"  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞: {stats['module_stats']['copypaste_filtered']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    assert stats['module_stats']['cache_hits'] == 0, "–ö—ç—à –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ optimizer"
    
    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ê–í–¢–û–ù–û–ú–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
    print("üéâ –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–û–õ–ù–û–°–¢–¨–Æ –ù–ï–ó–ê–í–ò–°–ò–ú–û!")


def test_with_optimizer_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –¢–û–õ–¨–ö–û —Å optimizer"""
    
    print("\n\nüîß –¢–ï–°–¢ –° OPTIMIZER (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)")
    print("=" * 60)
    
    from modules.extraction.module import ExtractionModule
    
    # –ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ Optimizer
    class MockOptimizer:
        def __init__(self):
            self.cache = {}
            self.hits = 0
            self.puts = 0
        
        def cache_get(self, key: str):
            if key in self.cache:
                self.hits += 1
                return self.cache[key]
            return None
        
        def cache_put(self, key: str, value: Any, ttl: int = None):
            self.cache[key] = value
            self.puts += 1
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å
    config = {'min_confidence': 0.5, 'use_rules': True}
    extractor = ExtractionModule(config)
    
    # –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û optimizer
    optimizer = MockOptimizer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û optimizer
    print("\n‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û optimizer")
    extractor.set_dependencies(optimizer=optimizer)
    
    dialogue_id = "test_with_cache"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±–µ–∑ –∫—ç—à–∞
    print("\nüìù –ü–µ—Ä–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (–±–µ–∑ –∫—ç—à–∞):")
    result1 = extractor.extract_facts(
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–µ—Ç—Ä, –º–Ω–µ 35 –ª–µ—Ç",
        {'dialogue_id': dialogue_id, 'session_id': '1'}
    )
    print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ: {len(result1.data)} —Ñ–∞–∫—Ç–æ–≤")
    print(f"  –ö—ç—à: hits={optimizer.hits}, puts={optimizer.puts}")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º - –∏–∑ –∫—ç—à–∞
    print("\nüìù –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (–∏–∑ –∫—ç—à–∞):")
    result2 = extractor.extract_facts(
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–µ—Ç—Ä, –º–Ω–µ 35 –ª–µ—Ç",
        {'dialogue_id': dialogue_id, 'session_id': '1'}
    )
    print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ: {len(result2.data)} —Ñ–∞–∫—Ç–æ–≤")
    print(f"  –ò–∑ –∫—ç—à–∞: {result2.metadata.get('from_cache', False)}")
    print(f"  –ö—ç—à: hits={optimizer.hits}, puts={optimizer.puts}")
    
    assert optimizer.hits > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"
    assert result2.metadata.get('from_cache'), "–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞"
    
    print("\n‚úÖ –ú–æ–¥—É–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û optimizer –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")


if __name__ == "__main__":
    try:
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
        test_module_autonomy()
        
        # –¢–µ—Å—Ç —Å optimizer
        test_with_optimizer_only()
        
        print("\n" + "üéâ" * 20)
        print("–ú–û–î–£–õ–¨ EXTRACTION –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ù–û–ú–ï–ù!")
        print("–ì–û–¢–û–í –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –°–ò–°–¢–ï–ú–£!")
        print("üéâ" * 20)
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)