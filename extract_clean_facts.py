#!/usr/bin/env python3
"""
–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å—Ç—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
"""
import json
import re
from pathlib import Path
from datetime import datetime

def extract_clean_facts(text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    facts = {
        'name': [],
        'age': [],
        'profession': [],
        'location': [],
        'family': [],
        'hobbies': [],
        'pets': []
    }
    
    text_lower = text.lower()
    
    # –ò–º—è - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in text_lower:
        match = re.search(r'–º–µ–Ω—è –∑–æ–≤—É—Ç ([–∞-—è—ë]+)', text_lower)
        if match:
            name = match.group(1).title()
            if len(name) >= 2 and len(name) <= 15:
                facts['name'].append(name)
    
    # –í–æ–∑—Ä–∞—Å—Ç - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if '–º–Ω–µ' in text_lower and '–ª–µ—Ç' in text_lower:
        match = re.search(r'–º–Ω–µ (\d+) –ª–µ—Ç', text_lower)
        if match:
            age = int(match.group(1))
            if 1 <= age <= 120:
                facts['age'].append(str(age))
    
    # –ü—Ä–æ—Ñ–µ—Å—Å–∏—è - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    profession_words = ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–≤—Ä–∞—á', '—É—á–∏—Ç–µ–ª—å', '–∏–Ω–∂–µ–Ω–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä',
                       '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '—é—Ä–∏—Å—Ç', '–ø–æ–≤–∞—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '—Å–≤–∞—Ä—â–∏–∫',
                       '–¥–µ–ø—É—Ç–∞—Ç', '–±–ª–æ–≥–µ—Ä', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ', '–º—É–∑—ã–∫–∞–Ω—Ç', '—Ö—É–¥–æ–∂–Ω–∏–∫', '–ø–∏—Å–∞—Ç–µ–ª—å']
    
    for word in profession_words:
        if word in text_lower:
            facts['profession'].append(word.title())
    
    # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    location_words = ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–∫–∞–∑–∞–Ω—å',
                     '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '—á–µ–ª—è–±–∏–Ω—Å–∫', '—Å–∞–º–∞—Ä–∞', '–æ–º—Å–∫', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É',
                     '—Å–∏–±–∏—Ä—å', '—É—Ä–∞–ª', '–¥–æ–Ω', '–≤–æ–ª–≥–∞', '–±–∞–π–∫–∞–ª']
    
    for word in location_words:
        if word in text_lower:
            facts['location'].append(word.title())
    
    # –°–µ–º—å—è - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    family_words = ['–∂–µ–Ω–∞', '–º—É–∂', '–¥–æ—á—å', '—Å—ã–Ω', '–º–∞–º–∞', '–ø–∞–ø–∞', '–±–∞–±—É—à–∫–∞', '–¥–µ–¥—É—à–∫–∞',
                   '—Å–µ—Å—Ç—Ä–∞', '–±—Ä–∞—Ç', '–ø–ª–µ–º—è–Ω–Ω–∏—Ü–∞', '–ø–ª–µ–º—è–Ω–Ω–∏–∫']
    
    for word in family_words:
        if word in text_lower:
            facts['family'].append(word.title())
    
    # –£–≤–ª–µ—á–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    hobby_words = ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–º—É–∑—ã–∫–∞', '—Å–ø–æ—Ä—Ç', '—Ç–∞–Ω—Ü—ã', '—á—Ç–µ–Ω–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                  '—Ä—ã–±–∞–ª–∫–∞', '–æ—Ö–æ—Ç–∞', '—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', '–≥–æ—Ç–æ–≤–∫–∞', '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ', '–ø–µ–Ω–∏–µ',
                  '—Ñ—É—Ç–±–æ–ª', '—Ç–µ–Ω–Ω–∏—Å', '–ø–ª–∞–≤–∞–Ω–∏–µ', '–±–µ–≥', '–π–æ–≥–∞', '—Ç–∞–Ω–≥–æ']
    
    for word in hobby_words:
        if word in text_lower:
            facts['hobbies'].append(word.title())
    
    # –ü–∏—Ç–æ–º—Ü—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    pet_words = ['—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–∫–æ—Ç', '–ø–µ—Å', '–∫–æ—Ç–µ–Ω–æ–∫', '—â–µ–Ω–æ–∫', '—Ö–æ–º—è–∫',
                '–ø—Ç–∏—Ü–∞', '—Ä—ã–±–∫–∞', '—á–µ—Ä–µ–ø–∞—Ö–∞', '–∫—Ä–æ–ª–∏–∫']
    
    for word in pet_words:
        if word in text_lower:
            facts['pets'].append(word.title())
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    for category in facts:
        facts[category] = list(set(facts[category]))
    
    return facts

def create_clean_prompt(dialog_id: int, facts: dict, user_messages: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏"""
    
    prompt = f"""# –§–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}

## –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_names = {
        'name': '–ò–º—è',
        'age': '–í–æ–∑—Ä–∞—Å—Ç',
        'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', 
        'location': '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        'family': '–°–µ–º—å—è',
        'hobbies': '–£–≤–ª–µ—á–µ–Ω–∏—è',
        'pets': '–ü–∏—Ç–æ–º—Ü—ã'
    }
    
    has_facts = False
    for category, values in facts.items():
        if values:
            has_facts = True
            category_name = category_names[category]
            prompt += f"**{category_name}:** {', '.join(values)}\n"
    
    if not has_facts:
        prompt += "–§–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏–∞–ª–æ–≥–µ.\n"
    
    prompt += f"""

## –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{chr(10).join(user_messages[:3])}

## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
2. –ü–æ–º–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
3. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ñ–∞–∫—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

---
*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
    
    return prompt

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤")
    print("="*60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    data_file = "data/format_example.jsonl"
    
    if not Path(data_file).exists():
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏...")
        dialogs = []
        
        with open(data_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                if line.strip():
                    try:
                        data = json.loads(line)
                        dialogs.append(data)
                    except json.JSONDecodeError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                        continue
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = Path("clean_facts")
        output_dir.mkdir(exist_ok=True)
        
        print(f"\nüîß –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
        for i, dialog in enumerate(dialogs, 1):
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ {i}...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_messages = []
            for session in dialog.get('sessions', []):
                for message in session.get('messages', []):
                    if message.get('role') == 'user':
                        content = message.get('content', '')
                        if content:
                            user_messages.append(content)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            all_text = ' '.join(user_messages)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
            facts = extract_clean_facts(all_text)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = create_clean_prompt(i, facts, user_messages)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"dialog_{i}_facts_{timestamp}.txt"
            filepath = output_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(prompt)
            
            print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(dialogs)} —Ñ–∞–π–ª–æ–≤ —Å —Ñ–∞–∫—Ç–∞–º–∏")
        print(f"üìÅ –ü–∞–ø–∫–∞: {output_dir.absolute()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
