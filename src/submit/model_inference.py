from typing import List
from models import Message
from submit_interface import ModelWithMemory

from .smart_memory import SmartMemory, SmartMemoryConfig


class SubmitModelWithMemory(ModelWithMemory):
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ–≤ –∏ —Å–∂–∞—Ç–∏–µ–º
    """

    def __init__(self, model_path: str) -> None:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏
        config = SmartMemoryConfig()
        config.use_vector_search = True
        config.use_fact_extraction = True
        config.use_compression = True
        
        # –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –ø–∞–º—è—Ç—å
        self.smart_memory = SmartMemory(model_path, config)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.pending_messages = {}
    
    def write_to_memory(self, messages: List[Message], dialogue_id: str) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if dialogue_id not in self.pending_messages:
            self.pending_messages[dialogue_id] = []
        
        self.pending_messages[dialogue_id].extend(messages)
    
    def clear_memory(self, dialogue_id: str) -> None:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞"""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        if dialogue_id in self.pending_messages:
            messages = self.pending_messages[dialogue_id]
            if messages:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º
                stats = self.smart_memory.process_dialogue(dialogue_id, messages)
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['sessions_count']} —Å–µ—Å—Å–∏–π, "
                      f"{stats['facts_extracted']} —Ñ–∞–∫—Ç–æ–≤, "
                      f"—Å–∂–∞—Ç–∏–µ {stats['compression_ratio']:.2f}")
            
            del self.pending_messages[dialogue_id]
    
    def answer_to_question(self, dialogue_id: str, question: str) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if dialogue_id in self.pending_messages:
            messages = self.pending_messages[dialogue_id]
            if messages:
                self.smart_memory.process_dialogue(dialogue_id, messages)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
        return self.smart_memory.answer_question(dialogue_id, question)