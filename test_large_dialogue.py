"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã GigaMemory –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ 100–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""
import json
import time
import random
import logging
from pathlib import Path
from typing import List, Dict
from models import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class DialogueGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–æ–ø–∏–ø–∞—Å—Ç–æ–º"""
    
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.personal_templates = [
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç {}.",
            "–ú–Ω–µ {} –ª–µ—Ç.",
            "–Ø –∂–∏–≤—É –≤ –≥–æ—Ä–æ–¥–µ {}.",
            "–Ø —Ä–∞–±–æ—Ç–∞—é {}.",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å {} –ø–æ –∏–º–µ–Ω–∏ {}.",
            "–ú–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞ - {}.",
            "–Ø –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º: {}.",
            "–£ –º–µ–Ω—è –º–∞—à–∏–Ω–∞ {}.",
            "–ú–æ—è –∂–µ–Ω–∞ –∑–æ–≤—É—Ç {}.",
            "–£ –º–µ–Ω—è {} –¥–µ—Ç–µ–π.",
            "–Ø —É—á–∏–ª—Å—è –≤ {}.",
            "–ú–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç {}.",
            "–Ø —Ä–æ–¥–∏–ª—Å—è –≤ {} –≥–æ–¥—É.",
            "–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω {}.",
            "–Ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é {} —Ä—É–±–ª–µ–π.",
        ]
        
        # –®–∞–±–ª–æ–Ω—ã –∫–æ–ø–∏–ø–∞—Å—Ç–∞ (–±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
        self.copypaste_templates = [
            "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {}",
            "–í–æ—Ç —Å—Ç–∞—Ç—å—è –ø—Ä–æ {}: [–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ 1000 —Å–∏–º–≤–æ–ª–æ–≤]",
            "–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ: {}",
            "–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {}",
            "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ {}",
            "–°–¥–µ–ª–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ {}",
            "–†–µ—à–∏ –∑–∞–¥–∞—á—É: {}",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: {}",
        ]
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.names = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω", "–ï–ª–µ–Ω–∞", "–î–º–∏—Ç—Ä–∏–π", "–ê–Ω–Ω–∞"]
        self.ages = [25, 30, 35, 40, 45, 28, 33, 37]
        self.cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        self.professions = ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–≤—Ä–∞—á", "—É—á–∏—Ç–µ–ª—å", "–∏–Ω–∂–µ–Ω–µ—Ä", "–¥–∏–∑–∞–π–Ω–µ—Ä"]
        self.pets = ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–ø–æ–ø—É–≥–∞–π", "—Ö–æ–º—è–∫"]
        self.pet_names = ["–ú—É—Ä–∫–∞", "–ë–∞—Ä—Å–∏–∫", "–®–∞—Ä–∏–∫", "–†–µ–∫—Å", "–ö–µ—à–∞"]
        self.foods = ["–ø–∏—Ü—Ü–∞", "—Å—É—à–∏", "–ø–∞—Å—Ç–∞", "–±–æ—Ä—â", "–ø–µ–ª—å–º–µ–Ω–∏", "—à–∞—à–ª—ã–∫"]
        self.sports = ["—Ñ—É—Ç–±–æ–ª", "–ø–ª–∞–≤–∞–Ω–∏–µ", "–±–µ–≥", "–π–æ–≥–∞", "—Ç–µ–Ω–Ω–∏—Å", "–±–æ–∫—Å"]
        self.cars = ["Toyota Camry", "BMW X5", "Mercedes E-class", "Hyundai Solaris", "Kia Rio"]
        self.universities = ["–ú–ì–£", "–ú–ì–¢–£", "–í–®–≠", "–°–ü–±–ì–£", "–ú–ò–§–ò"]
        self.colors = ["—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "–∫—Ä–∞—Å–Ω—ã–π", "—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π"]

    def generate_personal_message(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        template = random.choice(self.personal_templates)
        
        if "–∑–æ–≤—É—Ç {}" in template:
            return template.format(random.choice(self.names))
        elif "{} –ª–µ—Ç" in template:
            return template.format(random.choice(self.ages))
        elif "–≥–æ—Ä–æ–¥–µ {}" in template:
            return template.format(random.choice(self.cities))
        elif "—Ä–∞–±–æ—Ç–∞—é {}" in template:
            return template.format(random.choice(self.professions))
        elif "{} –ø–æ –∏–º–µ–Ω–∏ {}" in template:
            return template.format(random.choice(self.pets), random.choice(self.pet_names))
        elif "–µ–¥–∞ - {}" in template:
            return template.format(random.choice(self.foods))
        elif "—Å–ø–æ—Ä—Ç–æ–º: {}" in template:
            return template.format(random.choice(self.sports))
        elif "–º–∞—à–∏–Ω–∞ {}" in template:
            return template.format(random.choice(self.cars))
        elif "–∂–µ–Ω—É –∑–æ–≤—É—Ç {}" in template:
            return template.format(random.choice(self.names))
        elif "{} –¥–µ—Ç–µ–π" in template:
            return template.format(random.randint(1, 3))
        elif "—É—á–∏–ª—Å—è –≤ {}" in template:
            return template.format(random.choice(self.universities))
        elif "—Ü–≤–µ—Ç {}" in template:
            return template.format(random.choice(self.colors))
        elif "{} –≥–æ–¥—É" in template:
            return template.format(random.randint(1980, 2000))
        elif "—Ç–µ–ª–µ—Ñ–æ–Ω {}" in template:
            return template.format(f"+7{random.randint(9000000000, 9999999999)}")
        elif "{} —Ä—É–±–ª–µ–π" in template:
            return template.format(random.randint(50000, 200000))
        else:
            return "–Ø –ª—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏."

    def generate_copypaste_message(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–ø–∏–ø–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)"""
        template = random.choice(self.copypaste_templates)
        topic = random.choice(["Python", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–±–ª–æ–∫—á–µ–π–Ω"])
        
        if "[–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç" in template:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–ø–∏–ø–∞—Å—Ç
            long_text = " ".join([
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit." * 20
            ])
            return template.format(topic).replace("[–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ 1000 —Å–∏–º–≤–æ–ª–æ–≤]", long_text)
        else:
            return template.format(topic)

    def generate_dialogue(self, target_chars: int = 100000) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        
        Args:
            target_chars: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        """
        messages = []
        current_chars = 0
        session_id = 1
        messages_in_session = 0
        
        while current_chars < target_chars:
            # 70% –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, 30% –∫–æ–ø–∏–ø–∞—Å—Ç (–¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏)
            if random.random() < 0.7:
                content = self.generate_personal_message()
            else:
                content = self.generate_copypaste_message()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({
                "role": "user",
                "content": content,
                "session_id": f"session_{session_id}"
            })
            
            current_chars += len(content)
            messages_in_session += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π)
            assistant_response = random.choice([
                "–ü–æ–Ω—è–ª, –∑–∞–ø–∏—Å–∞–ª.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                "–û—Ç–ª–∏—á–Ω–æ!",
                "–•–æ—Ä–æ—à–æ.",
            ])
            
            messages.append({
                "role": "assistant",
                "content": assistant_response,
                "session_id": f"session_{session_id}"
            })
            
            current_chars += len(assistant_response)
            
            # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∫–∞–∂–¥—ã–µ 10-20 —Å–æ–æ–±—â–µ–Ω–∏–π
            if messages_in_session > random.randint(10, 20):
                session_id += 1
                messages_in_session = 0
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, {current_chars} —Å–∏–º–≤–æ–ª–æ–≤, {session_id} —Å–µ—Å—Å–∏–π")
        return messages


def test_large_dialogue(model_path: str = "/app/models/GigaChat-20B-A3B-instruct-v1.5-bf16"):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∏–∞–ª–æ–≥–µ
    
    Args:
        model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ GigaChat
    """
    print("\n" + "="*80)
    print("üöÄ –¢–ï–°–¢ GIGAMEMORY –ù–ê –ë–û–õ–¨–®–û–ú –î–ò–ê–õ–û–ì–ï (100–ö –°–ò–ú–í–û–õ–û–í)")
    print("="*80)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    from submit.model_inference import SubmitModelWithMemory
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    start_time = time.time()
    
    model = SubmitModelWithMemory(model_path)
    model.optimize_for_large_dialogue()  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    
    init_time = time.time() - start_time
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {init_time:.2f} —Å–µ–∫")
    
    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞...")
    generator = DialogueGenerator()
    dialogue_messages = generator.generate_dialogue(target_chars=100000)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Message
    messages = []
    for msg_dict in dialogue_messages:
        msg = Message(
            role=msg_dict["role"],
            content=msg_dict["content"],
            session_id=msg_dict.get("session_id")
        )
        messages.append(msg)
    
    dialogue_id = "test_dialogue_100k"
    
    # 3. –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
    print("\n3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...")
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    batch_size = 100
    for i in range(0, len(messages), batch_size):
        batch = messages[i:i+batch_size]
        model.write_to_memory(batch, dialogue_id)
        
        if i % 1000 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    write_time = time.time() - start_time
    print(f"‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–∞–º—è—Ç—å –∑–∞ {write_time:.2f} —Å–µ–∫")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    stats = model.get_stats()
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['processing_stats']['total_messages']}")
    print(f"   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ): {stats['processing_stats']['filtered_messages']}")
    print(f"   - –ö–æ–ø–∏–ø–∞—Å—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: {stats['processing_stats']['copypaste_filtered']}")
    print(f"   - –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {stats['processing_stats']['sessions_created']}")
    print(f"   - –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {stats['processing_stats']['facts_extracted']}")
    print(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {stats['processing_stats']['compression_ratio']:.2f}")
    print(f"   - Cache hit rate: {stats['cache_stats']['hit_rate']:.2%}")
    
    # 5. –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...")
    
    test_questions = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?",
        "–ì–¥–µ —è –∂–∏–≤—É?",
        "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –ø–∏—Ç–æ–º—Ü—ã?",
        "–ö–∞–∫–∞—è —É –º–µ–Ω—è –º–∞—à–∏–Ω–∞?",
        "–ï—Å—Ç—å –ª–∏ —É –º–µ–Ω—è –¥–µ—Ç–∏?",
        "–ì–¥–µ —è —É—á–∏–ª—Å—è?",
        "–ö–∞–∫–æ–π –º–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?",
        "–ö–∞–∫–∞—è –º–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞?",
        "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å?",
        "–°–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é?",
    ]
    
    print("\nüîç –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n")
    for question in test_questions:
        start_time = time.time()
        answer = model.answer_to_question(dialogue_id, question)
        answer_time = time.time() - start_time
        
        print(f"‚ùì {question}")
        print(f"üí¨ {answer}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {answer_time:.3f} —Å–µ–∫")
        print()
    
    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    
    final_stats = model.get_stats()
    
    print("\nüìå –û–±—Ä–∞–±–æ—Ç–∫–∞:")
    print(f"   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {final_stats['processing_stats']['filtered_messages']/max(1, final_stats['processing_stats']['total_messages']):.2%}")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–µ—Å—Å–∏–∏: {final_stats['processing_stats']['filtered_messages']/max(1, final_stats['processing_stats']['sessions_created']):.1f} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    print("\nüìå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(messages)/write_time:.0f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
    print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞: {final_stats['cache_stats']['hit_rate']:.2%}")
    print(f"   - –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {final_stats['cache_stats']['cache_size']} –∑–∞–ø–∏—Å–µ–π")
    
    print("\nüìå –ü–∞–º—è—Ç—å:")
    print(f"   - –î–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {final_stats['memory_stats']['total_dialogues']}")
    print(f"   - –°–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏: {final_stats['memory_stats']['total_sessions']}")
    
    # 7. –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    print("\n5Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
    model.clear_memory(dialogue_id)
    print("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
    
    print("\n" + "="*80)
    print("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print("="*80)


def create_submission_file(dialogue_file: str = "data/test_dialogue.jsonl",
                         output_file: str = "submit.csv"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª submit.csv –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    
    Args:
        dialogue_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    from submit.model_inference import SubmitModelWithMemory
    import csv
    
    model_path = "/app/models/GigaChat-20B-A3B-instruct-v1.5-bf16"
    model = SubmitModelWithMemory(model_path)
    
    results = []
    
    with open(dialogue_file, 'r', encoding='utf-8') as f:
        for line in f:
            data = json.loads(line)
            dialogue_id = data['id']
            question = data['question']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            all_messages = []
            for session in data['sessions']:
                for msg in session['messages']:
                    message = Message(
                        role=msg['role'],
                        content=msg['content'],
                        session_id=session['id']
                    )
                    all_messages.append(message)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            model.write_to_memory(all_messages, dialogue_id)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
            start_time = time.time()
            answer = model.answer_to_question(dialogue_id, question)
            answer_time = time.time() - start_time
            
            results.append({
                'id': dialogue_id,
                'answer': answer,
                'answer_time': answer_time
            })
            
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            model.clear_memory(dialogue_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=['id', 'answer', 'answer_time'])
        writer.writeheader()
        writer.writerows(results)
    
    print(f"‚úÖ –§–∞–π–ª {output_file} —Å–æ–∑–¥–∞–Ω —Å {len(results)} –æ—Ç–≤–µ—Ç–∞–º–∏")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    test_large_dialogue()
    
    # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    # create_submission_file()
