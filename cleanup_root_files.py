#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã!
"""
import os
from pathlib import Path

def analyze_root_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å"""
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    obsolete_files = [
        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Å—Ç—ã
        "test_classification.py",
        "test_classification_simple.py", 
        "test_copypaste_filter.py",
        "test_dataloader_filtering.py",
        "test_fact_extraction.py",
        "test_filtering_debug.py",
        "test_final_copypaste.py",
        "test_full_integration.py",
        "test_optimized_simple.py",
        "test_optimized_system.py",
        "test_rag_components.py",
        "test_rag_integration.py",
        "test_rag_mock.py",
        "test_rag_simple.py",
        "test_real_copypaste.py",
        "test_session_numbering.py",
        "test_simple_system.py",
        "test_simple_vector.py",
        "test_specific_message.py",
        "test_system_mock.py",
        "test_vector_rag_integration.py",
        "test_vector_rag_isolated.py",
        "test_vector_rag_simple.py",
        "test_vector_search.py",
        
        # –î–µ–º–æ —Å–∫—Ä–∏–ø—Ç—ã
        "demo_full_system.py",
        "demo_improved_vector_search.py",
        "demo_prompt_generation.py",
        
        # –°–∫—Ä–∏–ø—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        "extract_clean_facts.py",
        "extract_real_facts.py",
        "extract_simple_facts.py",
        
        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ MD —Ñ–∞–π–ª—ã
        "COPYPASTE_FIX_RESULTS.md",
        "PROJECT_ANALYSIS.md",
        "PROMPT_TEST_RESULTS.md",
        "RAG_ARCHITECTURE.md",
        "RAG_SYSTEM_TEST_RESULTS.md",
        "REFACTORING_PLAN.md",
        "REFACTORING_RESULTS.md",
        "obsolete_files_analysis.md",
        
        # –§–∞–π–ª—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        "example_vector_rag_integration.py",
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        "simple_test_results.json",
        "test_dialogue_100k.jsonl",
        "extracted_facts_report.txt",
        
        # –ê—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        "giga_memory_stub.tar.gz",
        "giga_memory_stub.zip",
        
        # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
        "setup.cfg",
        "Dockerfile",
        
        # –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ src/
        "src/dialog_processor.py",
        "src/models.py",
        "src/run.py",
        "src/test_classification.py",
    ]
    
    # –ü–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    obsolete_dirs = [
        "src/tests",
        "src/utils", 
        "src/zip",
        "start"
    ]
    
    print("üîç –ê–ù–ê–õ–ò–ó –£–°–¢–ê–†–ï–í–®–ò–• –§–ê–ô–õ–û–í –í –ö–û–†–ù–ï –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    total_size = 0
    files_to_delete = []
    
    print("\nüìã –§–ê–ô–õ–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    
    for file_path in obsolete_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            total_size += size
            files_to_delete.append((file_path, size))
            print(f"‚úÖ {file_path} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {file_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print(f"\nüìÅ –ü–ê–ü–ö–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    
    for dir_name in obsolete_dirs:
        if os.path.exists(dir_name):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏
            dir_size = 0
            for root, dirs, files in os.walk(dir_name):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        dir_size += os.path.getsize(file_path)
                    except:
                        pass
            
            total_size += dir_size
            print(f"‚úÖ {dir_name}/ ({dir_size:,} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {dir_name}/ (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–§–∞–π–ª–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(files_to_delete)}")
    print(f"–ü–∞–ø–æ–∫ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len([d for d in obsolete_dirs if os.path.exists(d)])}")
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")
    
    print(f"\n‚úÖ –ê–ö–¢–ò–í–ù–´–ï –§–ê–ô–õ–´ (–ù–ï –£–î–ê–õ–Ø–¢–¨):")
    print("-" * 40)
    
    active_files = [
        "run.py",
        "requirements.txt", 
        "README.md",
        "models.py",
        "submit_interface.py",
        "test_large_dialogue.py",
        "test_optimized_with_facts.py",
        "show_extracted_facts.py",
        "validate_system.py",
        "data/",
        "src/submit/",
        "VECTOR_RAG_INTEGRATION.md",
        "SYSTEM_READINESS_REPORT.md",
        "CLEANUP_REPORT.md"
    ]
    
    for file_path in active_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} - –ê–ö–¢–ò–í–ï–ù")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø: cp -r . ../memory_aij2025_backup")
    print("2. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ—ç—Ç–∞–ø–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
    print("-" * 40)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢ —Ñ–∞–π–ª—ã!")
    print("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç.")
    print("–í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º!")
    
    return files_to_delete, total_size

def generate_root_cleanup_commands():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ"""
    
    commands = [
        "# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ",
        "# –í–ù–ò–ú–ê–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø!",
        "",
        "# 1. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞",
        "cp -r . ../memory_aij2025_backup",
        "",
        "# 2. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤",
        "rm test_classification*.py",
        "rm test_copypaste_filter.py",
        "rm test_dataloader_filtering.py", 
        "rm test_fact_extraction.py",
        "rm test_filtering_debug.py",
        "rm test_final_copypaste.py",
        "rm test_full_integration.py",
        "rm test_optimized_simple.py",
        "rm test_optimized_system.py",
        "rm test_rag_*.py",
        "rm test_real_copypaste.py",
        "rm test_session_numbering.py",
        "rm test_simple_*.py",
        "rm test_specific_message.py",
        "rm test_system_mock.py",
        "rm test_vector_*.py",
        "",
        "# 3. –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–º–æ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
        "rm demo_*.py",
        "rm extract_*.py",
        "rm example_vector_rag_integration.py",
        "",
        "# 4. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö MD —Ñ–∞–π–ª–æ–≤",
        "rm COPYPASTE_FIX_RESULTS.md",
        "rm PROJECT_ANALYSIS.md",
        "rm PROMPT_TEST_RESULTS.md",
        "rm RAG_ARCHITECTURE.md",
        "rm RAG_SYSTEM_TEST_RESULTS.md",
        "rm REFACTORING_PLAN.md",
        "rm REFACTORING_RESULTS.md",
        "rm obsolete_files_analysis.md",
        "",
        "# 5. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
        "rm simple_test_results.json",
        "rm test_dialogue_100k.jsonl",
        "rm extracted_facts_report.txt",
        "",
        "# 6. –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
        "rm giga_memory_stub.*",
        "rm setup.cfg",
        "rm Dockerfile",
        "",
        "# 7. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ src/",
        "rm src/dialog_processor.py",
        "rm src/models.py",
        "rm src/run.py",
        "rm src/test_classification.py",
        "",
        "# 8. –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–ø–æ–∫",
        "rm -rf src/tests/",
        "rm -rf src/utils/",
        "rm -rf src/zip/",
        "rm -rf start/",
        "",
        "# 9. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Python",
        "find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true",
        "find . -name '*.pyc' -delete 2>/dev/null || true",
        "",
        "echo '–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.'"
    ]
    
    return commands

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ê–ù–ê–õ–ò–ó –£–°–¢–ê–†–ï–í–®–ò–• –§–ê–ô–õ–û–í –í –ö–û–†–ù–ï")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    files_to_delete, total_size = analyze_root_files()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    commands = generate_root_cleanup_commands()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∞–π–ª
    with open("cleanup_root_commands.sh", "w") as f:
        f.write("\n".join(commands))
    
    print(f"\nüíæ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: cleanup_root_commands.sh")
    print(f"üìã –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: chmod +x cleanup_root_commands.sh && ./cleanup_root_commands.sh")
    
    print(f"\nüéØ –ò–¢–û–ì:")
    print(f"–ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å {len(files_to_delete)} —Ñ–∞–π–ª–æ–≤ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–ø–æ–∫")
    print(f"–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")
    print(f"–ü—Ä–æ–µ–∫—Ç —Å—Ç–∞–Ω–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —á–∏—â–µ!")

if __name__ == "__main__":
    main()
